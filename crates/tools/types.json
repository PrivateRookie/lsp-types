{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AnnotatedTextEdit": {
      "additionalProperties": false,
      "description": "A special text edit with an additional change annotation.",
      "properties": {
        "annotationId": {
          "$ref": "#/definitions/ChangeAnnotationIdentifier",
          "description": "The actual annotation identifier."
        },
        "newText": {
          "description": "The string to be inserted. For delete operations use an empty string.",
          "type": "string"
        },
        "range": {
          "additionalProperties": false,
          "description": "The range of the text document to be manipulated. To insert text into a document create a range where start === end.",
          "properties": {
            "end": {
              "additionalProperties": false,
              "description": "The range's end position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            },
            "start": {
              "additionalProperties": false,
              "description": "The range's start position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            }
          },
          "required": [
            "start",
            "end"
          ],
          "type": "object"
        }
      },
      "required": [
        "annotationId",
        "newText",
        "range"
      ],
      "type": "object"
    },
    "ApplyWorkspaceEditParams": {
      "additionalProperties": false,
      "properties": {
        "edit": {
          "$ref": "#/definitions/WorkspaceEdit",
          "description": "The edits to apply."
        },
        "label": {
          "description": "An optional label of the workspace edit. This label is presented in the user interface for example on an undo stack to undo the workspace edit.",
          "type": "string"
        }
      },
      "required": [
        "edit"
      ],
      "type": "object"
    },
    "ApplyWorkspaceEditResponse": {
      "additionalProperties": false,
      "properties": {
        "applied": {
          "description": "Indicates whether the edit was applied or not.",
          "type": "boolean"
        },
        "failedChange": {
          "$ref": "#/definitions/uinteger",
          "description": "Depending on the client's failure handling strategy `failedChange` might contain the index of the change that failed. This property is only available if the client signals a `failureHandling` strategy in its client capabilities."
        },
        "failureReason": {
          "description": "An optional textual description for why the edit was not applied. This may be used by the server for diagnostic logging or to provide a suitable error for a request that triggered the edit.",
          "type": "string"
        }
      },
      "required": [
        "applied"
      ],
      "type": "object"
    },
    "CallHierarchyIncomingCall": {
      "additionalProperties": false,
      "properties": {
        "from": {
          "$ref": "#/definitions/CallHierarchyItem",
          "description": "The item that makes the call."
        },
        "fromRanges": {
          "description": "The ranges at which the calls appear. This is relative to the caller denoted by [`this.from`](#CallHierarchyIncomingCall.from).",
          "items": {
            "additionalProperties": false,
            "properties": {
              "end": {
                "additionalProperties": false,
                "description": "The range's end position.",
                "properties": {
                  "character": {
                    "$ref": "#/definitions/uinteger",
                    "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                  },
                  "line": {
                    "$ref": "#/definitions/uinteger",
                    "description": "Line position in a document (zero-based)."
                  }
                },
                "required": [
                  "line",
                  "character"
                ],
                "type": "object"
              },
              "start": {
                "additionalProperties": false,
                "description": "The range's start position.",
                "properties": {
                  "character": {
                    "$ref": "#/definitions/uinteger",
                    "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                  },
                  "line": {
                    "$ref": "#/definitions/uinteger",
                    "description": "Line position in a document (zero-based)."
                  }
                },
                "required": [
                  "line",
                  "character"
                ],
                "type": "object"
              }
            },
            "required": [
              "start",
              "end"
            ],
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "from",
        "fromRanges"
      ],
      "type": "object"
    },
    "CallHierarchyIncomingCallsParams": {
      "additionalProperties": false,
      "properties": {
        "item": {
          "$ref": "#/definitions/CallHierarchyItem"
        },
        "partialResultToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report partial results (e.g. streaming) to the client."
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "item"
      ],
      "type": "object"
    },
    "CallHierarchyItem": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "A data entry field that is preserved between a call hierarchy prepare and incoming calls or outgoing calls requests."
        },
        "detail": {
          "description": "More detail for this item, e.g. the signature of a function.",
          "type": "string"
        },
        "kind": {
          "$ref": "#/definitions/SymbolKind",
          "description": "The kind of this item."
        },
        "name": {
          "description": "The name of this item.",
          "type": "string"
        },
        "range": {
          "additionalProperties": false,
          "description": "The range enclosing this symbol not including leading/trailing whitespace but everything else, e.g. comments and code.",
          "properties": {
            "end": {
              "additionalProperties": false,
              "description": "The range's end position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            },
            "start": {
              "additionalProperties": false,
              "description": "The range's start position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            }
          },
          "required": [
            "start",
            "end"
          ],
          "type": "object"
        },
        "selectionRange": {
          "additionalProperties": false,
          "description": "The range that should be selected and revealed when this symbol is being picked, e.g. the name of a function. Must be contained by the [`range`](#CallHierarchyItem.range).",
          "properties": {
            "end": {
              "additionalProperties": false,
              "description": "The range's end position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            },
            "start": {
              "additionalProperties": false,
              "description": "The range's start position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            }
          },
          "required": [
            "start",
            "end"
          ],
          "type": "object"
        },
        "tags": {
          "description": "Tags for this item.",
          "items": {
            "$ref": "#/definitions/SymbolTag"
          },
          "type": "array"
        },
        "uri": {
          "description": "The resource identifier of this item.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "kind",
        "uri",
        "range",
        "selectionRange"
      ],
      "type": "object"
    },
    "CallHierarchyOptions": {
      "additionalProperties": false,
      "properties": {
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CallHierarchyOutgoingCall": {
      "additionalProperties": false,
      "properties": {
        "fromRanges": {
          "description": "The range at which this item is called. This is the range relative to the caller, e.g the item passed to `callHierarchy/outgoingCalls` request.",
          "items": {
            "additionalProperties": false,
            "properties": {
              "end": {
                "additionalProperties": false,
                "description": "The range's end position.",
                "properties": {
                  "character": {
                    "$ref": "#/definitions/uinteger",
                    "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                  },
                  "line": {
                    "$ref": "#/definitions/uinteger",
                    "description": "Line position in a document (zero-based)."
                  }
                },
                "required": [
                  "line",
                  "character"
                ],
                "type": "object"
              },
              "start": {
                "additionalProperties": false,
                "description": "The range's start position.",
                "properties": {
                  "character": {
                    "$ref": "#/definitions/uinteger",
                    "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                  },
                  "line": {
                    "$ref": "#/definitions/uinteger",
                    "description": "Line position in a document (zero-based)."
                  }
                },
                "required": [
                  "line",
                  "character"
                ],
                "type": "object"
              }
            },
            "required": [
              "start",
              "end"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "to": {
          "$ref": "#/definitions/CallHierarchyItem",
          "description": "The item that is called."
        }
      },
      "required": [
        "to",
        "fromRanges"
      ],
      "type": "object"
    },
    "CallHierarchyOutgoingCallsParams": {
      "additionalProperties": false,
      "properties": {
        "item": {
          "$ref": "#/definitions/CallHierarchyItem"
        },
        "partialResultToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report partial results (e.g. streaming) to the client."
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "item"
      ],
      "type": "object"
    },
    "CallHierarchyPrepareParams": {
      "additionalProperties": false,
      "properties": {
        "position": {
          "additionalProperties": false,
          "description": "The position inside the text document.",
          "properties": {
            "character": {
              "$ref": "#/definitions/uinteger",
              "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
            },
            "line": {
              "$ref": "#/definitions/uinteger",
              "description": "Line position in a document (zero-based)."
            }
          },
          "required": [
            "line",
            "character"
          ],
          "type": "object"
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "position",
        "textDocument"
      ],
      "type": "object"
    },
    "CallHierarchyRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "id": {
          "description": "The id used to register the request. The id can be used to deregister the request again. See also Registration#id.",
          "type": "string"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "ChangeAnnotation": {
      "additionalProperties": false,
      "description": "Additional information that describes document changes.",
      "properties": {
        "description": {
          "description": "A human-readable string which is rendered less prominent in the user interface.",
          "type": "string"
        },
        "label": {
          "description": "A human-readable string describing the actual change. The string is rendered prominent in the user interface.",
          "type": "string"
        },
        "needsConfirmation": {
          "description": "A flag which indicates that user confirmation is needed before applying the change.",
          "type": "boolean"
        }
      },
      "required": [
        "label"
      ],
      "type": "object"
    },
    "ChangeAnnotationIdentifier": {
      "description": "An identifier referring to a change annotation managed by a workspace edit.",
      "type": "string"
    },
    "CodeAction": {
      "additionalProperties": false,
      "description": "A code action represents a change that can be performed in code, e.g. to fix a problem or to refactor code.\n\nA CodeAction must set either `edit` and/or a `command`. If both are supplied, the `edit` is applied first, then the `command` is executed.",
      "properties": {
        "command": {
          "additionalProperties": false,
          "description": "A command this code action executes. If a code action provides an edit and a command, first the edit is executed and then the command.",
          "properties": {
            "arguments": {
              "description": "Arguments that the command handler should be invoked with.",
              "items": {},
              "type": "array"
            },
            "command": {
              "description": "The identifier of the actual command handler.",
              "type": "string"
            },
            "title": {
              "description": "Title of the command, like `save`.",
              "type": "string"
            }
          },
          "required": [
            "title",
            "command"
          ],
          "type": "object"
        },
        "data": {
          "description": "A data entry field that is preserved on a code action between a `textDocument/codeAction` and a `codeAction/resolve` request."
        },
        "diagnostics": {
          "description": "The diagnostics that this code action resolves.",
          "items": {
            "$ref": "#/definitions/Diagnostic"
          },
          "type": "array"
        },
        "disabled": {
          "additionalProperties": false,
          "description": "Marks that the code action cannot currently be applied.\n\nClients should follow the following guidelines regarding disabled code actions:\n\n- Disabled code actions are not shown in automatic lightbulbs code   action menus.\n\n- Disabled actions are shown as faded out in the code action menu when   the user request a more specific type of code action, such as   refactorings.\n\n- If the user has a keybinding that auto applies a code action and only   a disabled code actions are returned, the client should show the user   an error message with `reason` in the editor.",
          "properties": {
            "reason": {
              "description": "Human readable description of why the code action is currently disabled.\n\nThis is displayed in the code actions UI.",
              "type": "string"
            }
          },
          "required": [
            "reason"
          ],
          "type": "object"
        },
        "edit": {
          "$ref": "#/definitions/WorkspaceEdit",
          "description": "The workspace edit this code action performs."
        },
        "isPreferred": {
          "description": "Marks this as a preferred action. Preferred actions are used by the `auto fix` command and can be targeted by keybindings.\n\nA quick fix should be marked preferred if it properly addresses the underlying error. A refactoring should be marked preferred if it is the most reasonable choice of actions to take.",
          "type": "boolean"
        },
        "kind": {
          "$ref": "#/definitions/CodeActionKind",
          "description": "The kind of the code action.\n\nUsed to filter code actions."
        },
        "title": {
          "description": "A short, human-readable, title for this code action.",
          "type": "string"
        }
      },
      "required": [
        "title"
      ],
      "type": "object"
    },
    "CodeActionClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "codeActionLiteralSupport": {
          "additionalProperties": false,
          "description": "The client supports code action literals as a valid response of the `textDocument/codeAction` request.",
          "properties": {
            "codeActionKind": {
              "additionalProperties": false,
              "description": "The code action kind is supported with the following value set.",
              "properties": {
                "valueSet": {
                  "description": "The code action kind values the client supports. When this property exists the client also guarantees that it will handle values outside its set gracefully and falls back to a default value when unknown.",
                  "items": {
                    "$ref": "#/definitions/CodeActionKind"
                  },
                  "type": "array"
                }
              },
              "required": [
                "valueSet"
              ],
              "type": "object"
            }
          },
          "required": [
            "codeActionKind"
          ],
          "type": "object"
        },
        "dataSupport": {
          "description": "Whether code action supports the `data` property which is preserved between a `textDocument/codeAction` and a `codeAction/resolve` request.",
          "type": "boolean"
        },
        "disabledSupport": {
          "description": "Whether code action supports the `disabled` property.",
          "type": "boolean"
        },
        "dynamicRegistration": {
          "description": "Whether code action supports dynamic registration.",
          "type": "boolean"
        },
        "honorsChangeAnnotations": {
          "description": "Whether the client honors the change annotations in text edits and resource operations returned via the `CodeAction#edit` property by for example presenting the workspace edit in the user interface and asking for confirmation.",
          "type": "boolean"
        },
        "isPreferredSupport": {
          "description": "Whether code action supports the `isPreferred` property.",
          "type": "boolean"
        },
        "resolveSupport": {
          "additionalProperties": false,
          "description": "Whether the client supports resolving additional code action properties via a separate `codeAction/resolve` request.",
          "properties": {
            "properties": {
              "description": "The properties that a client can resolve lazily.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "properties"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "CodeActionContext": {
      "additionalProperties": false,
      "description": "Contains additional diagnostic information about the context in which a code action is run.",
      "properties": {
        "diagnostics": {
          "description": "An array of diagnostics known on the client side overlapping the range provided to the `textDocument/codeAction` request. They are provided so that the server knows which errors are currently presented to the user for the given range. There is no guarantee that these accurately reflect the error state of the resource. The primary parameter to compute code actions is the provided range.",
          "items": {
            "$ref": "#/definitions/Diagnostic"
          },
          "type": "array"
        },
        "only": {
          "description": "Requested kind of actions to return.\n\nActions not of this kind are filtered out by the client before being shown. So servers can omit computing them.",
          "items": {
            "$ref": "#/definitions/CodeActionKind"
          },
          "type": "array"
        }
      },
      "required": [
        "diagnostics"
      ],
      "type": "object"
    },
    "CodeActionKind": {
      "description": "The kind of a code action.\n\nKinds are a hierarchical list of identifiers separated by `.`, e.g. `\"refactor.extract.function\"`.\n\nThe set of kinds is open and client needs to announce the kinds it supports to the server during initialization. \n A set of predefined code action kinds.",
      "type": "string"
    },
    "CodeActionOptions": {
      "additionalProperties": false,
      "properties": {
        "codeActionKinds": {
          "description": "CodeActionKinds that this server may return.\n\nThe list of kinds may be generic, such as `CodeActionKind.Refactor`, or the server may list out every specific kind they provide.",
          "items": {
            "$ref": "#/definitions/CodeActionKind"
          },
          "type": "array"
        },
        "resolveProvider": {
          "description": "The server provides support to resolve additional information for a code action.",
          "type": "boolean"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CodeActionParams": {
      "additionalProperties": false,
      "description": "Params for the CodeActionRequest",
      "properties": {
        "context": {
          "$ref": "#/definitions/CodeActionContext",
          "description": "Context carrying additional information."
        },
        "partialResultToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report partial results (e.g. streaming) to the client."
        },
        "range": {
          "additionalProperties": false,
          "description": "The range for which the command was invoked.",
          "properties": {
            "end": {
              "additionalProperties": false,
              "description": "The range's end position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            },
            "start": {
              "additionalProperties": false,
              "description": "The range's start position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            }
          },
          "required": [
            "start",
            "end"
          ],
          "type": "object"
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The document in which the command was invoked.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "textDocument",
        "range",
        "context"
      ],
      "type": "object"
    },
    "CodeActionRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "codeActionKinds": {
          "description": "CodeActionKinds that this server may return.\n\nThe list of kinds may be generic, such as `CodeActionKind.Refactor`, or the server may list out every specific kind they provide.",
          "items": {
            "$ref": "#/definitions/CodeActionKind"
          },
          "type": "array"
        },
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "resolveProvider": {
          "description": "The server provides support to resolve additional information for a code action.",
          "type": "boolean"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "CodeDescription": {
      "additionalProperties": false,
      "description": "Structure to capture a description for an error code.",
      "properties": {
        "href": {
          "description": "An URI to open with more information about the diagnostic error.",
          "type": "string"
        }
      },
      "required": [
        "href"
      ],
      "type": "object"
    },
    "CodeLensClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Whether code lens supports dynamic registration.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CodeLensOptions": {
      "additionalProperties": false,
      "properties": {
        "resolveProvider": {
          "description": "Code lens has a resolve provider as well.",
          "type": "boolean"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CodeLensRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "resolveProvider": {
          "description": "Code lens has a resolve provider as well.",
          "type": "boolean"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "CodeLensWorkspaceClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "refreshSupport": {
          "description": "Whether the client implementation supports a refresh request sent from the server to the client.\n\nNote that this event is global and will force the client to refresh all code lenses currently shown. It should be used with absolute care and is useful for situation where a server for example detect a project wide change that requires such a calculation.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CompletionClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "completionItem": {
          "additionalProperties": false,
          "description": "The client supports the following `CompletionItem` specific capabilities.",
          "properties": {
            "commitCharactersSupport": {
              "description": "Client supports commit characters on a completion item.",
              "type": "boolean"
            },
            "deprecatedSupport": {
              "description": "Client supports the deprecated property on a completion item.",
              "type": "boolean"
            },
            "documentationFormat": {
              "description": "Client supports the following content formats for the documentation property. The order describes the preferred format of the client.",
              "items": {
                "$ref": "#/definitions/MarkupKind"
              },
              "type": "array"
            },
            "insertReplaceSupport": {
              "description": "Client supports insert replace edit to control different behavior if a completion item is inserted in the text or should replace text.",
              "type": "boolean"
            },
            "insertTextModeSupport": {
              "additionalProperties": false,
              "description": "The client supports the `insertTextMode` property on a completion item to override the whitespace handling mode as defined by the client.",
              "properties": {
                "valueSet": {
                  "items": {
                    "$ref": "#/definitions/InsertTextMode"
                  },
                  "type": "array"
                }
              },
              "required": [
                "valueSet"
              ],
              "type": "object"
            },
            "preselectSupport": {
              "description": "Client supports the preselect property on a completion item.",
              "type": "boolean"
            },
            "resolveSupport": {
              "additionalProperties": false,
              "description": "Indicates which properties a client can resolve lazily on a completion item. Before version 3.16.0 only the predefined properties `documentation` and `detail` could be resolved lazily.",
              "properties": {
                "properties": {
                  "description": "The properties that a client can resolve lazily.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "properties"
              ],
              "type": "object"
            },
            "snippetSupport": {
              "description": "Client supports snippets as insert text.\n\nA snippet can define tab stops and placeholders with `$1`, `$2` and `${3:foo}`. `$0` defines the final tab stop, it defaults to the end of the snippet. Placeholders with equal identifiers are linked, that is typing in one will update others too.",
              "type": "boolean"
            },
            "tagSupport": {
              "additionalProperties": false,
              "description": "Client supports the tag property on a completion item. Clients supporting tags have to handle unknown tags gracefully. Clients especially need to preserve unknown tags when sending a completion item back to the server in a resolve call.",
              "properties": {
                "valueSet": {
                  "description": "The tags supported by the client.",
                  "items": {
                    "$ref": "#/definitions/CompletionItemTag"
                  },
                  "type": "array"
                }
              },
              "required": [
                "valueSet"
              ],
              "type": "object"
            }
          },
          "type": "object"
        },
        "completionItemKind": {
          "additionalProperties": false,
          "properties": {
            "valueSet": {
              "description": "The completion item kind values the client supports. When this property exists the client also guarantees that it will handle values outside its set gracefully and falls back to a default value when unknown.\n\nIf this property is not present the client only supports the completion items kinds from `Text` to `Reference` as defined in the initial version of the protocol.",
              "items": {
                "$ref": "#/definitions/CompletionItemKind"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "contextSupport": {
          "description": "The client supports to send additional context information for a `textDocument/completion` request.",
          "type": "boolean"
        },
        "dynamicRegistration": {
          "description": "Whether completion supports dynamic registration.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CompletionContext": {
      "additionalProperties": false,
      "description": "Contains additional information about the context in which a completion request is triggered.",
      "properties": {
        "triggerCharacter": {
          "description": "The trigger character (a single character) that has trigger code complete. Is undefined if `triggerKind !== CompletionTriggerKind.TriggerCharacter`",
          "type": "string"
        },
        "triggerKind": {
          "$ref": "#/definitions/CompletionTriggerKind",
          "description": "How the completion was triggered."
        }
      },
      "required": [
        "triggerKind"
      ],
      "type": "object"
    },
    "CompletionItem": {
      "additionalProperties": false,
      "properties": {
        "additionalTextEdits": {
          "description": "An optional array of additional text edits that are applied when selecting this completion. Edits must not overlap (including the same insert position) with the main edit nor with themselves.\n\nAdditional text edits should be used to change text unrelated to the current cursor position (for example adding an import statement at the top of the file if the completion item will insert an unqualified type).",
          "items": {
            "additionalProperties": false,
            "properties": {
              "newText": {
                "description": "The string to be inserted. For delete operations use an empty string.",
                "type": "string"
              },
              "range": {
                "additionalProperties": false,
                "description": "The range of the text document to be manipulated. To insert text into a document create a range where start === end.",
                "properties": {
                  "end": {
                    "additionalProperties": false,
                    "description": "The range's end position.",
                    "properties": {
                      "character": {
                        "$ref": "#/definitions/uinteger",
                        "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                      },
                      "line": {
                        "$ref": "#/definitions/uinteger",
                        "description": "Line position in a document (zero-based)."
                      }
                    },
                    "required": [
                      "line",
                      "character"
                    ],
                    "type": "object"
                  },
                  "start": {
                    "additionalProperties": false,
                    "description": "The range's start position.",
                    "properties": {
                      "character": {
                        "$ref": "#/definitions/uinteger",
                        "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                      },
                      "line": {
                        "$ref": "#/definitions/uinteger",
                        "description": "Line position in a document (zero-based)."
                      }
                    },
                    "required": [
                      "line",
                      "character"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "start",
                  "end"
                ],
                "type": "object"
              }
            },
            "required": [
              "range",
              "newText"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "command": {
          "additionalProperties": false,
          "description": "An optional command that is executed *after* inserting this completion.\n*Note* that additional modifications to the current document should be described with the additionalTextEdits-property.",
          "properties": {
            "arguments": {
              "description": "Arguments that the command handler should be invoked with.",
              "items": {},
              "type": "array"
            },
            "command": {
              "description": "The identifier of the actual command handler.",
              "type": "string"
            },
            "title": {
              "description": "Title of the command, like `save`.",
              "type": "string"
            }
          },
          "required": [
            "title",
            "command"
          ],
          "type": "object"
        },
        "commitCharacters": {
          "description": "An optional set of characters that when pressed while this completion is active will accept it first and then type that character. *Note* that all commit characters should have `length=1` and that superfluous characters will be ignored.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "data": {
          "description": "A data entry field that is preserved on a completion item between a completion and a completion resolve request."
        },
        "deprecated": {
          "deprecated": "Use `tags` instead if supported.",
          "description": "Indicates if this item is deprecated.",
          "type": "boolean"
        },
        "detail": {
          "description": "A human-readable string with additional information about this item, like type or symbol information.",
          "type": "string"
        },
        "documentation": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/MarkupContent"
            }
          ],
          "description": "A human-readable string that represents a doc-comment."
        },
        "filterText": {
          "description": "A string that should be used when filtering a set of completion items. When `falsy` the label is used as the filter text for this item.",
          "type": "string"
        },
        "insertText": {
          "description": "A string that should be inserted into a document when selecting this completion. When `falsy` the label is used as the insert text for this item.\n\nThe `insertText` is subject to interpretation by the client side. Some tools might not take the string literally. For example VS Code when code complete is requested in this example `con<cursor position>` and a completion item with an `insertText` of `console` is provided it will only insert `sole`. Therefore it is recommended to use `textEdit` instead since it avoids additional client side interpretation.",
          "type": "string"
        },
        "insertTextFormat": {
          "$ref": "#/definitions/InsertTextFormat",
          "description": "The format of the insert text. The format applies to both the `insertText` property and the `newText` property of a provided `textEdit`. If omitted defaults to `InsertTextFormat.PlainText`."
        },
        "insertTextMode": {
          "$ref": "#/definitions/InsertTextMode",
          "description": "How whitespace and indentation is handled during completion item insertion. If not provided the client's default value is used."
        },
        "kind": {
          "$ref": "#/definitions/CompletionItemKind",
          "description": "The kind of this completion item. Based of the kind an icon is chosen by the editor. The standardized set of available values is defined in `CompletionItemKind`."
        },
        "label": {
          "description": "The label of this completion item. By default also the text that is inserted when selecting this completion.",
          "type": "string"
        },
        "preselect": {
          "description": "Select this item when showing.\n\n*Note* that only one completion item can be selected and that the tool / client decides which item that is. The rule is that the *first* item of those that match best is selected.",
          "type": "boolean"
        },
        "sortText": {
          "description": "A string that should be used when comparing this item with other items. When `falsy` the label is used as the sort text for this item.",
          "type": "string"
        },
        "tags": {
          "description": "Tags for this completion item.",
          "items": {
            "$ref": "#/definitions/CompletionItemTag"
          },
          "type": "array"
        },
        "textEdit": {
          "anyOf": [
            {
              "additionalProperties": false,
              "properties": {
                "newText": {
                  "description": "The string to be inserted. For delete operations use an empty string.",
                  "type": "string"
                },
                "range": {
                  "additionalProperties": false,
                  "description": "The range of the text document to be manipulated. To insert text into a document create a range where start === end.",
                  "properties": {
                    "end": {
                      "additionalProperties": false,
                      "description": "The range's end position.",
                      "properties": {
                        "character": {
                          "$ref": "#/definitions/uinteger",
                          "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                        },
                        "line": {
                          "$ref": "#/definitions/uinteger",
                          "description": "Line position in a document (zero-based)."
                        }
                      },
                      "required": [
                        "line",
                        "character"
                      ],
                      "type": "object"
                    },
                    "start": {
                      "additionalProperties": false,
                      "description": "The range's start position.",
                      "properties": {
                        "character": {
                          "$ref": "#/definitions/uinteger",
                          "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                        },
                        "line": {
                          "$ref": "#/definitions/uinteger",
                          "description": "Line position in a document (zero-based)."
                        }
                      },
                      "required": [
                        "line",
                        "character"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "start",
                    "end"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "range",
                "newText"
              ],
              "type": "object"
            },
            {
              "$ref": "#/definitions/InsertReplaceEdit"
            }
          ],
          "description": "An edit which is applied to a document when selecting this completion. When an edit is provided the value of `insertText` is ignored.\n\n*Note:* The range of the edit must be a single line range and it must contain the position at which completion has been requested.\n\nMost editors support two different operations when accepting a completion item. One is to insert a completion text and the other is to replace an existing text with a completion text. Since this can usually not be predetermined by a server it can report both ranges. Clients need to signal support for `InsertReplaceEdit`s via the `textDocument.completion.insertReplaceSupport` client capability property.\n\n*Note 1:* The text edit's range as well as both ranges from an insert replace edit must be a [single line] and they must contain the position at which completion has been requested.\n*Note 2:* If an `InsertReplaceEdit` is returned the edit's insert range must be a prefix of the edit's replace range, that means it must be contained and starting at the same position."
        }
      },
      "required": [
        "label"
      ],
      "type": "object"
    },
    "CompletionItemKind": {
      "description": "The kind of a completion entry.",
      "enum": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25
      ],
      "enumNames": [
        "Text",
        "Method",
        "Function",
        "Constructor",
        "Field",
        "Variable",
        "Class",
        "Interface",
        "Module",
        "Property",
        "Unit",
        "Value",
        "Enum",
        "Keyword",
        "Snippet",
        "Color",
        "File",
        "Reference",
        "Folder",
        "EnumMember",
        "Constant",
        "Struct",
        "Event",
        "Operator",
        "TypeParameter"
      ],
      "type": "number"
    },
    "CompletionItemTag": {
      "const": 1,
      "description": "Completion item tags are extra annotations that tweak the rendering of a completion item.",
      "type": "number"
    },
    "CompletionList": {
      "additionalProperties": false,
      "description": "Represents a collection of [completion items](#CompletionItem) to be presented in the editor.",
      "properties": {
        "isIncomplete": {
          "description": "This list is not complete. Further typing should result in recomputing this list.\n\nRecomputed lists have all their items replaced (not appended) in the incomplete completion sessions.",
          "type": "boolean"
        },
        "items": {
          "description": "The completion items.",
          "items": {
            "$ref": "#/definitions/CompletionItem"
          },
          "type": "array"
        }
      },
      "required": [
        "isIncomplete",
        "items"
      ],
      "type": "object"
    },
    "CompletionOptions": {
      "additionalProperties": false,
      "description": "Completion options.",
      "properties": {
        "allCommitCharacters": {
          "description": "The list of all possible characters that commit a completion. This field can be used if clients don't support individual commit characters per completion item. See client capability `completion.completionItem.commitCharactersSupport`.\n\nIf a server provides both `allCommitCharacters` and commit characters on an individual completion item the ones on the completion item win.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resolveProvider": {
          "description": "The server provides support to resolve additional information for a completion item.",
          "type": "boolean"
        },
        "triggerCharacters": {
          "description": "Most tools trigger completion request automatically without explicitly requesting it using a keyboard shortcut (e.g. Ctrl+Space). Typically they do so when the user starts to type an identifier. For example if the user types `c` in a JavaScript file code complete will automatically pop up present `console` besides others as a completion item. Characters that make up identifiers don't need to be listed here.\n\nIf code complete should automatically be trigger on characters not being valid inside an identifier (for example `.` in JavaScript) list them in `triggerCharacters`.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CompletionParams": {
      "additionalProperties": false,
      "properties": {
        "context": {
          "$ref": "#/definitions/CompletionContext",
          "description": "The completion context. This is only available if the client specifies to send this using the client capability `completion.contextSupport === true`"
        },
        "partialResultToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report partial results (e.g. streaming) to the client."
        },
        "position": {
          "additionalProperties": false,
          "description": "The position inside the text document.",
          "properties": {
            "character": {
              "$ref": "#/definitions/uinteger",
              "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
            },
            "line": {
              "$ref": "#/definitions/uinteger",
              "description": "Line position in a document (zero-based)."
            }
          },
          "required": [
            "line",
            "character"
          ],
          "type": "object"
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "position",
        "textDocument"
      ],
      "type": "object"
    },
    "CompletionRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "allCommitCharacters": {
          "description": "The list of all possible characters that commit a completion. This field can be used if clients don't support individual commit characters per completion item. See client capability `completion.completionItem.commitCharactersSupport`.\n\nIf a server provides both `allCommitCharacters` and commit characters on an individual completion item the ones on the completion item win.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "resolveProvider": {
          "description": "The server provides support to resolve additional information for a completion item.",
          "type": "boolean"
        },
        "triggerCharacters": {
          "description": "Most tools trigger completion request automatically without explicitly requesting it using a keyboard shortcut (e.g. Ctrl+Space). Typically they do so when the user starts to type an identifier. For example if the user types `c` in a JavaScript file code complete will automatically pop up present `console` besides others as a completion item. Characters that make up identifiers don't need to be listed here.\n\nIf code complete should automatically be trigger on characters not being valid inside an identifier (for example `.` in JavaScript) list them in `triggerCharacters`.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "CompletionTriggerKind": {
      "description": "How a completion was triggered",
      "enum": [
        1,
        2,
        3
      ],
      "enumNames": [
        "Invoked",
        "TriggerCharacter",
        "TriggerForIncompleteCompletions"
      ],
      "type": "number"
    },
    "ConfigurationItem": {
      "additionalProperties": false,
      "properties": {
        "scopeUri": {
          "description": "The scope to get the configuration section for.",
          "type": "string"
        },
        "section": {
          "description": "The configuration section asked for.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigurationParams": {
      "additionalProperties": false,
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/ConfigurationItem"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "CreateFile": {
      "additionalProperties": false,
      "description": "Create file operation",
      "properties": {
        "annotationId": {
          "$ref": "#/definitions/ChangeAnnotationIdentifier",
          "description": "An optional annotation identifer describing the operation."
        },
        "kind": {
          "const": "create",
          "description": "A create",
          "type": "string"
        },
        "options": {
          "$ref": "#/definitions/CreateFileOptions",
          "description": "Additional options"
        },
        "uri": {
          "description": "The resource to create.",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "uri"
      ],
      "type": "object"
    },
    "CreateFileOptions": {
      "additionalProperties": false,
      "description": "Options to create a file.",
      "properties": {
        "ignoreIfExists": {
          "description": "Ignore if exists.",
          "type": "boolean"
        },
        "overwrite": {
          "description": "Overwrite existing file. Overwrite wins over `ignoreIfExists`",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CreateFilesParams": {
      "additionalProperties": false,
      "description": "The parameters sent in notifications/requests for user-initiated creation of files.",
      "properties": {
        "files": {
          "description": "An array of all files/folders created in this operation.",
          "items": {
            "$ref": "#/definitions/FileCreate"
          },
          "type": "array"
        }
      },
      "required": [
        "files"
      ],
      "type": "object"
    },
    "DeclarationClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Whether declaration supports dynamic registration. If this is set to `true` the client supports the new `DeclarationRegistrationOptions` return value for the corresponding server capability as well.",
          "type": "boolean"
        },
        "linkSupport": {
          "description": "The client supports additional metadata in the form of declaration links.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DeclarationOptions": {
      "additionalProperties": false,
      "properties": {
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DeclarationParams": {
      "additionalProperties": false,
      "properties": {
        "partialResultToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report partial results (e.g. streaming) to the client."
        },
        "position": {
          "additionalProperties": false,
          "description": "The position inside the text document.",
          "properties": {
            "character": {
              "$ref": "#/definitions/uinteger",
              "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
            },
            "line": {
              "$ref": "#/definitions/uinteger",
              "description": "Line position in a document (zero-based)."
            }
          },
          "required": [
            "line",
            "character"
          ],
          "type": "object"
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "position",
        "textDocument"
      ],
      "type": "object"
    },
    "DeclarationRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "id": {
          "description": "The id used to register the request. The id can be used to deregister the request again. See also Registration#id.",
          "type": "string"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "DefinitionClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Whether definition supports dynamic registration.",
          "type": "boolean"
        },
        "linkSupport": {
          "description": "The client supports additional metadata in the form of definition links.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DefinitionOptions": {
      "additionalProperties": false,
      "properties": {
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DefinitionParams": {
      "additionalProperties": false,
      "properties": {
        "partialResultToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report partial results (e.g. streaming) to the client."
        },
        "position": {
          "additionalProperties": false,
          "description": "The position inside the text document.",
          "properties": {
            "character": {
              "$ref": "#/definitions/uinteger",
              "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
            },
            "line": {
              "$ref": "#/definitions/uinteger",
              "description": "Line position in a document (zero-based)."
            }
          },
          "required": [
            "line",
            "character"
          ],
          "type": "object"
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "position",
        "textDocument"
      ],
      "type": "object"
    },
    "DefinitionRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "DeleteFile": {
      "additionalProperties": false,
      "description": "Delete file operation",
      "properties": {
        "annotationId": {
          "$ref": "#/definitions/ChangeAnnotationIdentifier",
          "description": "An optional annotation identifer describing the operation."
        },
        "kind": {
          "const": "delete",
          "description": "A delete",
          "type": "string"
        },
        "options": {
          "$ref": "#/definitions/DeleteFileOptions",
          "description": "Delete options."
        },
        "uri": {
          "description": "The file to delete.",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "uri"
      ],
      "type": "object"
    },
    "DeleteFileOptions": {
      "additionalProperties": false,
      "description": "Delete file options",
      "properties": {
        "ignoreIfNotExists": {
          "description": "Ignore the operation if the file doesn't exist.",
          "type": "boolean"
        },
        "recursive": {
          "description": "Delete the content recursively if a folder is denoted.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DeleteFilesParams": {
      "additionalProperties": false,
      "description": "The parameters sent in notifications/requests for user-initiated deletes of files.",
      "properties": {
        "files": {
          "description": "An array of all files/folders deleted in this operation.",
          "items": {
            "$ref": "#/definitions/FileDelete"
          },
          "type": "array"
        }
      },
      "required": [
        "files"
      ],
      "type": "object"
    },
    "Diagnostic": {
      "additionalProperties": false,
      "properties": {
        "code": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "The diagnostic's code, which might appear in the user interface."
        },
        "codeDescription": {
          "$ref": "#/definitions/CodeDescription",
          "description": "An optional property to describe the error code."
        },
        "data": {
          "description": "A data entry field that is preserved between a `textDocument/publishDiagnostics` notification and `textDocument/codeAction` request."
        },
        "message": {
          "description": "The diagnostic's message.",
          "type": "string"
        },
        "range": {
          "additionalProperties": false,
          "description": "The range at which the message applies.",
          "properties": {
            "end": {
              "additionalProperties": false,
              "description": "The range's end position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            },
            "start": {
              "additionalProperties": false,
              "description": "The range's start position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            }
          },
          "required": [
            "start",
            "end"
          ],
          "type": "object"
        },
        "relatedInformation": {
          "description": "An array of related diagnostic information, e.g. when symbol-names within a scope collide all definitions can be marked via this property.",
          "items": {
            "$ref": "#/definitions/DiagnosticRelatedInformation"
          },
          "type": "array"
        },
        "severity": {
          "$ref": "#/definitions/DiagnosticSeverity",
          "description": "The diagnostic's severity. Can be omitted. If omitted it is up to the client to interpret diagnostics as error, warning, info or hint."
        },
        "source": {
          "description": "A human-readable string describing the source of this diagnostic, e.g. 'typescript' or 'super lint'.",
          "type": "string"
        },
        "tags": {
          "description": "Additional metadata about the diagnostic.",
          "items": {
            "$ref": "#/definitions/DiagnosticTag"
          },
          "type": "array"
        }
      },
      "required": [
        "range",
        "message"
      ],
      "type": "object"
    },
    "DiagnosticRelatedInformation": {
      "additionalProperties": false,
      "description": "Represents a related message and source code location for a diagnostic. This should be used to point to code locations that cause or are related to a diagnostics, e.g when duplicating a symbol in a scope.",
      "properties": {
        "location": {
          "additionalProperties": false,
          "description": "The location of this related diagnostic information.",
          "properties": {
            "range": {
              "additionalProperties": false,
              "properties": {
                "end": {
                  "additionalProperties": false,
                  "description": "The range's end position.",
                  "properties": {
                    "character": {
                      "$ref": "#/definitions/uinteger",
                      "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                    },
                    "line": {
                      "$ref": "#/definitions/uinteger",
                      "description": "Line position in a document (zero-based)."
                    }
                  },
                  "required": [
                    "line",
                    "character"
                  ],
                  "type": "object"
                },
                "start": {
                  "additionalProperties": false,
                  "description": "The range's start position.",
                  "properties": {
                    "character": {
                      "$ref": "#/definitions/uinteger",
                      "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                    },
                    "line": {
                      "$ref": "#/definitions/uinteger",
                      "description": "Line position in a document (zero-based)."
                    }
                  },
                  "required": [
                    "line",
                    "character"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "start",
                "end"
              ],
              "type": "object"
            },
            "uri": {
              "type": "string"
            }
          },
          "required": [
            "uri",
            "range"
          ],
          "type": "object"
        },
        "message": {
          "description": "The message of this related diagnostic information.",
          "type": "string"
        }
      },
      "required": [
        "location",
        "message"
      ],
      "type": "object"
    },
    "DiagnosticSeverity": {
      "enum": [
        1,
        2,
        3,
        4
      ],
      "enumNames": [
        "Error",
        "Warning",
        "Information",
        "Hint"
      ],
      "type": "number"
    },
    "DiagnosticTag": {
      "description": "The diagnostic tags.",
      "enum": [
        1,
        2
      ],
      "enumNames": [
        "Unnecessary",
        "Deprecated"
      ],
      "type": "number"
    },
    "DidChangeConfigurationClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Did change configuration notification supports dynamic registration.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DidChangeWatchedFilesClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Did change watched files notification supports dynamic registration. Please note that the current protocol doesn't support static configuration for file changes from the server side.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DidChangeWatchedFilesRegistrationOptions": {
      "additionalProperties": false,
      "description": "Describe options to be used when registering for file system change events.",
      "properties": {
        "watchers": {
          "description": "The watchers to register.",
          "items": {
            "$ref": "#/definitions/FileSystemWatcher"
          },
          "type": "array"
        }
      },
      "required": [
        "watchers"
      ],
      "type": "object"
    },
    "DidChangeWorkspaceFoldersParams": {
      "additionalProperties": false,
      "properties": {
        "event": {
          "$ref": "#/definitions/WorkspaceFoldersChangeEvent",
          "description": "The actual workspace folder change event."
        }
      },
      "required": [
        "event"
      ],
      "type": "object"
    },
    "DocumentColorClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Whether document color supports dynamic registration.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocumentColorOptions": {
      "additionalProperties": false,
      "properties": {
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocumentColorRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "id": {
          "description": "The id used to register the request. The id can be used to deregister the request again. See also Registration#id.",
          "type": "string"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "DocumentFilter": {
      "additionalProperties": false,
      "properties": {
        "language": {
          "description": "A language id, like `typescript`.",
          "type": "string"
        },
        "pattern": {
          "description": "A glob pattern, like `*.{ts,js}`.\n\nGlob patterns can have the following syntax:\n- `*` to match one or more characters in a path segment\n- `?` to match on one character in a path segment\n- `**` to match any number of path segments, including none\n- `{}` to group sub patterns into an OR expression. (e.g. `**​/*.{ts,js}`   matches all TypeScript and JavaScript files)\n- `[]` to declare a range of characters to match in a path segment   (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)\n- `[!...]` to negate a range of characters to match in a path segment   (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but   not `example.0`)",
          "type": "string"
        },
        "scheme": {
          "description": "A Uri [scheme](#Uri.scheme), like `file` or `untitled`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocumentFormattingClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Whether formatting supports dynamic registration.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocumentFormattingOptions": {
      "additionalProperties": false,
      "properties": {
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocumentFormattingRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "DocumentHighlight": {
      "additionalProperties": false,
      "description": "A document highlight is a range inside a text document which deserves special attention. Usually a document highlight is visualized by changing the background color of its range.",
      "properties": {
        "kind": {
          "$ref": "#/definitions/DocumentHighlightKind",
          "description": "The highlight kind, default is DocumentHighlightKind.Text."
        },
        "range": {
          "additionalProperties": false,
          "description": "The range this highlight applies to.",
          "properties": {
            "end": {
              "additionalProperties": false,
              "description": "The range's end position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            },
            "start": {
              "additionalProperties": false,
              "description": "The range's start position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            }
          },
          "required": [
            "start",
            "end"
          ],
          "type": "object"
        }
      },
      "required": [
        "range"
      ],
      "type": "object"
    },
    "DocumentHighlightClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Whether document highlight supports dynamic registration.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocumentHighlightKind": {
      "description": "A document highlight kind.",
      "enum": [
        1,
        2,
        3
      ],
      "enumNames": [
        "Text",
        "Read",
        "Write"
      ],
      "type": "number"
    },
    "DocumentHighlightOptions": {
      "additionalProperties": false,
      "properties": {
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocumentHighlightParams": {
      "additionalProperties": false,
      "properties": {
        "partialResultToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report partial results (e.g. streaming) to the client."
        },
        "position": {
          "additionalProperties": false,
          "description": "The position inside the text document.",
          "properties": {
            "character": {
              "$ref": "#/definitions/uinteger",
              "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
            },
            "line": {
              "$ref": "#/definitions/uinteger",
              "description": "Line position in a document (zero-based)."
            }
          },
          "required": [
            "line",
            "character"
          ],
          "type": "object"
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "position",
        "textDocument"
      ],
      "type": "object"
    },
    "DocumentHighlightRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "DocumentLinkClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Whether document link supports dynamic registration.",
          "type": "boolean"
        },
        "tooltipSupport": {
          "description": "Whether the client supports the `tooltip` property on `DocumentLink`.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocumentLinkOptions": {
      "additionalProperties": false,
      "properties": {
        "resolveProvider": {
          "description": "Document links have a resolve provider as well.",
          "type": "boolean"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocumentLinkRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "resolveProvider": {
          "description": "Document links have a resolve provider as well.",
          "type": "boolean"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "DocumentOnTypeFormattingClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Whether on type formatting supports dynamic registration.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocumentOnTypeFormattingOptions": {
      "additionalProperties": false,
      "properties": {
        "firstTriggerCharacter": {
          "description": "A character on which formatting should be triggered, like `}`.",
          "type": "string"
        },
        "moreTriggerCharacter": {
          "description": "More trigger characters.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "firstTriggerCharacter"
      ],
      "type": "object"
    },
    "DocumentOnTypeFormattingRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "firstTriggerCharacter": {
          "description": "A character on which formatting should be triggered, like `}`.",
          "type": "string"
        },
        "moreTriggerCharacter": {
          "description": "More trigger characters.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "documentSelector",
        "firstTriggerCharacter"
      ],
      "type": "object"
    },
    "DocumentRangeFormattingClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Whether formatting supports dynamic registration.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocumentRangeFormattingOptions": {
      "additionalProperties": false,
      "properties": {
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocumentRangeFormattingRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "DocumentSelector": {
      "items": {
        "$ref": "#/definitions/DocumentFilter"
      },
      "type": "array"
    },
    "DocumentSymbol": {
      "additionalProperties": false,
      "description": "Represents programming constructs like variables, classes, interfaces etc. that appear in a document. Document symbols can be hierarchical and they have two ranges: one that encloses its definition and one that points to its most interesting range, e.g. the range of an identifier.",
      "properties": {
        "children": {
          "description": "Children of this symbol, e.g. properties of a class.",
          "items": {
            "$ref": "#/definitions/DocumentSymbol"
          },
          "type": "array"
        },
        "deprecated": {
          "deprecated": "Use tags instead",
          "description": "Indicates if this symbol is deprecated.",
          "type": "boolean"
        },
        "detail": {
          "description": "More detail for this symbol, e.g the signature of a function.",
          "type": "string"
        },
        "kind": {
          "$ref": "#/definitions/SymbolKind",
          "description": "The kind of this symbol."
        },
        "name": {
          "description": "The name of this symbol. Will be displayed in the user interface and therefore must not be an empty string or a string only consisting of white spaces.",
          "type": "string"
        },
        "range": {
          "additionalProperties": false,
          "description": "The range enclosing this symbol not including leading/trailing whitespace but everything else like comments. This information is typically used to determine if the clients cursor is inside the symbol to reveal in the symbol in the UI.",
          "properties": {
            "end": {
              "additionalProperties": false,
              "description": "The range's end position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            },
            "start": {
              "additionalProperties": false,
              "description": "The range's start position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            }
          },
          "required": [
            "start",
            "end"
          ],
          "type": "object"
        },
        "selectionRange": {
          "additionalProperties": false,
          "description": "The range that should be selected and revealed when this symbol is being picked, e.g. the name of a function. Must be contained by the `range`.",
          "properties": {
            "end": {
              "additionalProperties": false,
              "description": "The range's end position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            },
            "start": {
              "additionalProperties": false,
              "description": "The range's start position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            }
          },
          "required": [
            "start",
            "end"
          ],
          "type": "object"
        },
        "tags": {
          "description": "Tags for this document symbol.",
          "items": {
            "$ref": "#/definitions/SymbolTag"
          },
          "type": "array"
        }
      },
      "required": [
        "name",
        "kind",
        "range",
        "selectionRange"
      ],
      "type": "object"
    },
    "DocumentSymbolClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Whether document symbol supports dynamic registration.",
          "type": "boolean"
        },
        "hierarchicalDocumentSymbolSupport": {
          "description": "The client supports hierarchical document symbols.",
          "type": "boolean"
        },
        "labelSupport": {
          "description": "The client supports an additional label presented in the UI when registering a document symbol provider.",
          "type": "boolean"
        },
        "symbolKind": {
          "additionalProperties": false,
          "description": "Specific capabilities for the `SymbolKind` in the `textDocument/documentSymbol` request.",
          "properties": {
            "valueSet": {
              "description": "The symbol kind values the client supports. When this property exists the client also guarantees that it will handle values outside its set gracefully and falls back to a default value when unknown.\n\nIf this property is not present the client only supports the symbol kinds from `File` to `Array` as defined in the initial version of the protocol.",
              "items": {
                "$ref": "#/definitions/SymbolKind"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "tagSupport": {
          "additionalProperties": false,
          "description": "The client supports tags on `SymbolInformation`. Tags are supported on `DocumentSymbol` if `hierarchicalDocumentSymbolSupport` is set to true. Clients supporting tags have to handle unknown tags gracefully.",
          "properties": {
            "valueSet": {
              "description": "The tags supported by the client.",
              "items": {
                "$ref": "#/definitions/SymbolTag"
              },
              "type": "array"
            }
          },
          "required": [
            "valueSet"
          ],
          "type": "object"
        }
      },
      "type": "object"
    },
    "DocumentSymbolOptions": {
      "additionalProperties": false,
      "properties": {
        "label": {
          "description": "A human-readable string that is shown when multiple outlines trees are shown for the same document.",
          "type": "string"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocumentSymbolParams": {
      "additionalProperties": false,
      "properties": {
        "partialResultToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report partial results (e.g. streaming) to the client."
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "textDocument"
      ],
      "type": "object"
    },
    "DocumentSymbolRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "label": {
          "description": "A human-readable string that is shown when multiple outlines trees are shown for the same document.",
          "type": "string"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "ExecuteCommandClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Execute command supports dynamic registration.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ExecuteCommandOptions": {
      "additionalProperties": false,
      "properties": {
        "commands": {
          "description": "The commands to be executed on the server",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "commands"
      ],
      "type": "object"
    },
    "ExecuteCommandParams": {
      "additionalProperties": false,
      "properties": {
        "arguments": {
          "description": "Arguments that the command should be invoked with.",
          "items": {},
          "type": "array"
        },
        "command": {
          "description": "The identifier of the actual command handler.",
          "type": "string"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "command"
      ],
      "type": "object"
    },
    "ExecuteCommandRegistrationOptions": {
      "additionalProperties": false,
      "description": "Execute command registration options.",
      "properties": {
        "commands": {
          "description": "The commands to be executed on the server",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "commands"
      ],
      "type": "object"
    },
    "FailureHandlingKind": {
      "enum": [
        "abort",
        "transactional",
        "undo",
        "textOnlyTransactional"
      ],
      "type": "string"
    },
    "FileChangeType": {
      "description": "The file event type.",
      "enum": [
        1,
        2,
        3
      ],
      "enumNames": [
        "Created",
        "Changed",
        "Deleted"
      ],
      "type": "number"
    },
    "FileCreate": {
      "additionalProperties": false,
      "description": "Represents information on a file/folder create.",
      "properties": {
        "uri": {
          "description": "A file:// URI for the location of the file/folder being created.",
          "type": "string"
        }
      },
      "required": [
        "uri"
      ],
      "type": "object"
    },
    "FileDelete": {
      "additionalProperties": false,
      "description": "Represents information on a file/folder delete.",
      "properties": {
        "uri": {
          "description": "A file:// URI for the location of the file/folder being deleted.",
          "type": "string"
        }
      },
      "required": [
        "uri"
      ],
      "type": "object"
    },
    "FileOperationFilter": {
      "additionalProperties": false,
      "description": "A filter to describe in which file operation requests or notifications the server is interested in.",
      "properties": {
        "pattern": {
          "additionalProperties": false,
          "description": "The actual file operation pattern.",
          "properties": {
            "glob": {
              "description": "The glob pattern to match. Glob patterns can have the following syntax:\n- `*` to match one or more characters in a path segment\n- `?` to match on one character in a path segment\n- `**` to match any number of path segments, including none\n- `{}` to group sub patterns into an OR expression. (e.g. `**​/*.{ts,js}`   matches all TypeScript and JavaScript files)\n- `[]` to declare a range of characters to match in a path segment   (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)\n- `[!...]` to negate a range of characters to match in a path segment   (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but   not `example.0`)",
              "type": "string"
            },
            "matches": {
              "$ref": "#/definitions/FileOperationPatternKind",
              "description": "Whether to match files or folders with this pattern.\n\nMatches both if undefined."
            },
            "options": {
              "$ref": "#/definitions/FileOperationPatternOptions",
              "description": "Additional options used during matching."
            }
          },
          "required": [
            "glob"
          ],
          "type": "object"
        },
        "scheme": {
          "description": "A Uri like `file` or `untitled`.",
          "type": "string"
        }
      },
      "required": [
        "pattern"
      ],
      "type": "object"
    },
    "FileOperationPatternKind": {
      "description": "A pattern kind describing if a glob pattern matches a file a folder or both.",
      "enum": [
        "file",
        "folder"
      ],
      "type": "string"
    },
    "FileOperationPatternOptions": {
      "additionalProperties": false,
      "description": "Matching options for the file operation pattern.",
      "properties": {
        "ignoreCase": {
          "description": "The pattern should be matched ignoring casing.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "FileRename": {
      "additionalProperties": false,
      "description": "Represents information on a file/folder rename.",
      "properties": {
        "newUri": {
          "description": "A file:// URI for the new location of the file/folder being renamed.",
          "type": "string"
        },
        "oldUri": {
          "description": "A file:// URI for the original location of the file/folder being renamed.",
          "type": "string"
        }
      },
      "required": [
        "oldUri",
        "newUri"
      ],
      "type": "object"
    },
    "FileSystemWatcher": {
      "additionalProperties": false,
      "properties": {
        "globPattern": {
          "description": "The glob pattern to watch.\n\nGlob patterns can have the following syntax:\n- `*` to match one or more characters in a path segment\n- `?` to match on one character in a path segment\n- `**` to match any number of path segments, including none\n- `{}` to group sub patterns into an OR expression. (e.g. `**​/*.{ts,js}`   matches all TypeScript and JavaScript files)\n- `[]` to declare a range of characters to match in a path segment   (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)\n- `[!...]` to negate a range of characters to match in a path segment   (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not   `example.0`)",
          "type": "string"
        },
        "kind": {
          "$ref": "#/definitions/uinteger",
          "description": "The kind of events of interest. If omitted it defaults to WatchKind.Create | WatchKind.Change | WatchKind.Delete which is 7."
        }
      },
      "required": [
        "globPattern"
      ],
      "type": "object"
    },
    "FoldingRange": {
      "additionalProperties": false,
      "description": "Represents a folding range. To be valid, start and end line must be bigger than zero and smaller than the number of lines in the document. Clients are free to ignore invalid ranges.",
      "properties": {
        "endCharacter": {
          "$ref": "#/definitions/uinteger",
          "description": "The zero-based character offset before the folded range ends. If not defined, defaults to the length of the end line."
        },
        "endLine": {
          "$ref": "#/definitions/uinteger",
          "description": "The zero-based end line of the range to fold. The folded area ends with the line's last character. To be valid, the end must be zero or larger and smaller than the number of lines in the document."
        },
        "kind": {
          "description": "Describes the kind of the folding range such as `comment` or `region`. The kind is used to categorize folding ranges and used by commands like 'Fold all comments'. See [FoldingRangeKind](#FoldingRangeKind) for an enumeration of standardized kinds.",
          "type": "string"
        },
        "startCharacter": {
          "$ref": "#/definitions/uinteger",
          "description": "The zero-based character offset from where the folded range starts. If not defined, defaults to the length of the start line."
        },
        "startLine": {
          "$ref": "#/definitions/uinteger",
          "description": "The zero-based start line of the range to fold. The folded area starts after the line's last character. To be valid, the end must be zero or larger and smaller than the number of lines in the document."
        }
      },
      "required": [
        "startLine",
        "endLine"
      ],
      "type": "object"
    },
    "FoldingRangeClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Whether implementation supports dynamic registration for folding range providers. If this is set to `true` the client supports the new `FoldingRangeRegistrationOptions` return value for the corresponding server capability as well.",
          "type": "boolean"
        },
        "lineFoldingOnly": {
          "description": "If set, the client signals that it only supports folding complete lines. If set, client will ignore specified `startCharacter` and `endCharacter` properties in a FoldingRange.",
          "type": "boolean"
        },
        "rangeLimit": {
          "$ref": "#/definitions/uinteger",
          "description": "The maximum number of folding ranges that the client prefers to receive per document. The value serves as a hint, servers are free to follow the limit."
        }
      },
      "type": "object"
    },
    "FoldingRangeKind": {
      "description": "Enum of known range kinds",
      "enum": [
        "comment",
        "imports",
        "region"
      ],
      "type": "string"
    },
    "FoldingRangeOptions": {
      "additionalProperties": false,
      "properties": {
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "FoldingRangeParams": {
      "additionalProperties": false,
      "properties": {
        "partialResultToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report partial results (e.g. streaming) to the client."
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "textDocument"
      ],
      "type": "object"
    },
    "FoldingRangeRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "id": {
          "description": "The id used to register the request. The id can be used to deregister the request again. See also Registration#id.",
          "type": "string"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "Hover": {
      "additionalProperties": false,
      "description": "The result of a hover request.",
      "properties": {
        "contents": {
          "anyOf": [
            {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "language": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "language",
                    "value"
                  ],
                  "type": "object"
                }
              ],
              "deprecated": "use MarkupContent instead.",
              "description": "MarkedString can be used to render human readable text. It is either a markdown string or a code-block that provides a language and a code snippet. The language identifier is semantically equal to the optional language identifier in fenced code blocks in GitHub issues.\n\nThe pair of a language and a value is an equivalent to markdown: ```${language} ${value} ```\n\nNote that markdown strings will be sanitized - that means html will be escaped."
            },
            {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "language": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "language",
                      "value"
                    ],
                    "type": "object"
                  }
                ],
                "deprecated": "use MarkupContent instead.",
                "description": "MarkedString can be used to render human readable text. It is either a markdown string or a code-block that provides a language and a code snippet. The language identifier is semantically equal to the optional language identifier in fenced code blocks in GitHub issues.\n\nThe pair of a language and a value is an equivalent to markdown: ```${language} ${value} ```\n\nNote that markdown strings will be sanitized - that means html will be escaped."
              },
              "type": "array"
            },
            {
              "$ref": "#/definitions/MarkupContent"
            }
          ],
          "description": "The hover's content"
        },
        "range": {
          "additionalProperties": false,
          "description": "An optional range is a range inside a text document that is used to visualize a hover, e.g. by changing the background color.",
          "properties": {
            "end": {
              "additionalProperties": false,
              "description": "The range's end position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            },
            "start": {
              "additionalProperties": false,
              "description": "The range's start position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            }
          },
          "required": [
            "start",
            "end"
          ],
          "type": "object"
        }
      },
      "required": [
        "contents"
      ],
      "type": "object"
    },
    "HoverClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "contentFormat": {
          "description": "Client supports the following content formats if the content property refers to a `literal of type MarkupContent`. The order describes the preferred format of the client.",
          "items": {
            "$ref": "#/definitions/MarkupKind"
          },
          "type": "array"
        },
        "dynamicRegistration": {
          "description": "Whether hover supports dynamic registration.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "HoverOptions": {
      "additionalProperties": false,
      "properties": {
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "HoverParams": {
      "additionalProperties": false,
      "properties": {
        "position": {
          "additionalProperties": false,
          "description": "The position inside the text document.",
          "properties": {
            "character": {
              "$ref": "#/definitions/uinteger",
              "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
            },
            "line": {
              "$ref": "#/definitions/uinteger",
              "description": "Line position in a document (zero-based)."
            }
          },
          "required": [
            "line",
            "character"
          ],
          "type": "object"
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "position",
        "textDocument"
      ],
      "type": "object"
    },
    "HoverRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "ImplementationClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Whether implementation supports dynamic registration. If this is set to `true` the client supports the new `ImplementationRegistrationOptions` return value for the corresponding server capability as well.",
          "type": "boolean"
        },
        "linkSupport": {
          "description": "The client supports additional metadata in the form of definition links.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ImplementationOptions": {
      "additionalProperties": false,
      "properties": {
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ImplementationParams": {
      "additionalProperties": false,
      "properties": {
        "partialResultToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report partial results (e.g. streaming) to the client."
        },
        "position": {
          "additionalProperties": false,
          "description": "The position inside the text document.",
          "properties": {
            "character": {
              "$ref": "#/definitions/uinteger",
              "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
            },
            "line": {
              "$ref": "#/definitions/uinteger",
              "description": "Line position in a document (zero-based)."
            }
          },
          "required": [
            "line",
            "character"
          ],
          "type": "object"
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "position",
        "textDocument"
      ],
      "type": "object"
    },
    "ImplementationRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "id": {
          "description": "The id used to register the request. The id can be used to deregister the request again. See also Registration#id.",
          "type": "string"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "InitializeError": {
      "additionalProperties": false,
      "properties": {
        "retry": {
          "description": "Indicates whether the client execute the following retry logic: (1) show the message provided by the ResponseError to the user (2) user selects retry or cancel (3) if user selected retry the initialize method is sent again.",
          "type": "boolean"
        }
      },
      "required": [
        "retry"
      ],
      "type": "object"
    },
    "InsertReplaceEdit": {
      "additionalProperties": false,
      "description": "A special text edit to provide an insert and a replace operation.",
      "properties": {
        "insert": {
          "additionalProperties": false,
          "description": "The range if the insert is requested",
          "properties": {
            "end": {
              "additionalProperties": false,
              "description": "The range's end position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            },
            "start": {
              "additionalProperties": false,
              "description": "The range's start position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            }
          },
          "required": [
            "start",
            "end"
          ],
          "type": "object"
        },
        "newText": {
          "description": "The string to be inserted.",
          "type": "string"
        },
        "replace": {
          "additionalProperties": false,
          "description": "The range if the replace is requested.",
          "properties": {
            "end": {
              "additionalProperties": false,
              "description": "The range's end position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            },
            "start": {
              "additionalProperties": false,
              "description": "The range's start position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            }
          },
          "required": [
            "start",
            "end"
          ],
          "type": "object"
        }
      },
      "required": [
        "newText",
        "insert",
        "replace"
      ],
      "type": "object"
    },
    "InsertTextFormat": {
      "description": "Defines whether the insert text in a completion item should be interpreted as plain text or a snippet.",
      "enum": [
        1,
        2
      ],
      "enumNames": [
        "PlainText",
        "Snippet"
      ],
      "type": "number"
    },
    "InsertTextMode": {
      "description": "How whitespace and indentation is handled during completion item insertion.",
      "enum": [
        1,
        2
      ],
      "enumNames": [
        "asIs",
        "adjustIndentation"
      ],
      "type": "number"
    },
    "LinkedEditingRangeClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Whether implementation supports dynamic registration. If this is set to `true` the client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)` return value for the corresponding server capability as well.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LinkedEditingRangeOptions": {
      "additionalProperties": false,
      "properties": {
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LinkedEditingRangeParams": {
      "additionalProperties": false,
      "properties": {
        "position": {
          "additionalProperties": false,
          "description": "The position inside the text document.",
          "properties": {
            "character": {
              "$ref": "#/definitions/uinteger",
              "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
            },
            "line": {
              "$ref": "#/definitions/uinteger",
              "description": "Line position in a document (zero-based)."
            }
          },
          "required": [
            "line",
            "character"
          ],
          "type": "object"
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "position",
        "textDocument"
      ],
      "type": "object"
    },
    "LinkedEditingRangeRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "id": {
          "description": "The id used to register the request. The id can be used to deregister the request again. See also Registration#id.",
          "type": "string"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "LinkedEditingRanges": {
      "additionalProperties": false,
      "properties": {
        "ranges": {
          "description": "A list of ranges that can be renamed together. The ranges must have identical length and contain identical text content. The ranges cannot overlap.",
          "items": {
            "additionalProperties": false,
            "properties": {
              "end": {
                "additionalProperties": false,
                "description": "The range's end position.",
                "properties": {
                  "character": {
                    "$ref": "#/definitions/uinteger",
                    "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                  },
                  "line": {
                    "$ref": "#/definitions/uinteger",
                    "description": "Line position in a document (zero-based)."
                  }
                },
                "required": [
                  "line",
                  "character"
                ],
                "type": "object"
              },
              "start": {
                "additionalProperties": false,
                "description": "The range's start position.",
                "properties": {
                  "character": {
                    "$ref": "#/definitions/uinteger",
                    "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                  },
                  "line": {
                    "$ref": "#/definitions/uinteger",
                    "description": "Line position in a document (zero-based)."
                  }
                },
                "required": [
                  "line",
                  "character"
                ],
                "type": "object"
              }
            },
            "required": [
              "start",
              "end"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "wordPattern": {
          "description": "An optional word pattern (regular expression) that describes valid contents for the given ranges. If no pattern is provided, the client configuration's word pattern will be used.",
          "type": "string"
        }
      },
      "required": [
        "ranges"
      ],
      "type": "object"
    },
    "MarkdownClientCapabilities": {
      "additionalProperties": false,
      "description": "Client capabilities specific to the used markdown parser.",
      "properties": {
        "parser": {
          "description": "The name of the parser.",
          "type": "string"
        },
        "version": {
          "description": "The version of the parser.",
          "type": "string"
        }
      },
      "required": [
        "parser"
      ],
      "type": "object"
    },
    "MarkupContent": {
      "additionalProperties": false,
      "description": "A `MarkupContent` literal represents a string value which content is interpreted base on its kind flag. Currently the protocol supports `plaintext` and `markdown` as markup kinds.\n\nIf the kind is `markdown` then the value can contain fenced code blocks like in GitHub issues.\n\nHere is an example how such a string can be constructed using JavaScript / TypeScript: ```typescript let markdown: MarkdownContent = { \tkind: MarkupKind.Markdown, \tvalue: [ \t\t'# Header', \t\t'Some text', \t\t'```typescript', \t\t'someCode();', \t\t'```' \t].join('\\n') }; ```\n\n*Please Note* that clients might sanitize the return markdown. A client could decide to remove HTML from the markdown to avoid script execution.",
      "properties": {
        "kind": {
          "$ref": "#/definitions/MarkupKind",
          "description": "The type of the Markup"
        },
        "value": {
          "description": "The content itself",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "value"
      ],
      "type": "object"
    },
    "MarkupKind": {
      "description": "Describes the content type that a client supports in various result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n\nPlease note that `MarkupKinds` must not start with a `$`. This kinds are reserved for internal usage.",
      "enum": [
        "plaintext",
        "markdown"
      ],
      "type": "string"
    },
    "MessageType": {
      "enum": [
        1,
        2,
        3,
        4
      ],
      "enumNames": [
        "Error",
        "Warning",
        "Info",
        "Log"
      ],
      "type": "number"
    },
    "Moniker": {
      "additionalProperties": false,
      "description": "Moniker definition to match LSIF 0.5 moniker definition.",
      "properties": {
        "identifier": {
          "description": "The identifier of the moniker. The value is opaque in LSIF however schema owners are allowed to define the structure if they want.",
          "type": "string"
        },
        "kind": {
          "$ref": "#/definitions/MonikerKind",
          "description": "The moniker kind if known."
        },
        "scheme": {
          "description": "The scheme of the moniker. For example tsc or .Net",
          "type": "string"
        },
        "unique": {
          "$ref": "#/definitions/UniquenessLevel",
          "description": "The scope in which the moniker is unique"
        }
      },
      "required": [
        "scheme",
        "identifier",
        "unique"
      ],
      "type": "object"
    },
    "MonikerKind": {
      "description": "The moniker kind.",
      "enum": [
        "import",
        "export",
        "local"
      ],
      "type": "string"
    },
    "MonikerOptions": {
      "additionalProperties": false,
      "properties": {
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "MonikerParams": {
      "additionalProperties": false,
      "properties": {
        "partialResultToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report partial results (e.g. streaming) to the client."
        },
        "position": {
          "additionalProperties": false,
          "description": "The position inside the text document.",
          "properties": {
            "character": {
              "$ref": "#/definitions/uinteger",
              "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
            },
            "line": {
              "$ref": "#/definitions/uinteger",
              "description": "Line position in a document (zero-based)."
            }
          },
          "required": [
            "line",
            "character"
          ],
          "type": "object"
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "position",
        "textDocument"
      ],
      "type": "object"
    },
    "MonikerRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "ParameterInformation": {
      "additionalProperties": false,
      "description": "Represents a parameter of a callable-signature. A parameter can have a label and a doc-comment.",
      "properties": {
        "documentation": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/MarkupContent"
            }
          ],
          "description": "The human-readable doc-comment of this parameter. Will be shown in the UI but can be omitted."
        },
        "label": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "items": {
                "$ref": "#/definitions/uinteger"
              },
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            }
          ],
          "description": "The label of this parameter information.\n\nEither a string or an inclusive start and exclusive end offsets within its containing signature label. (see SignatureInformation.label). The offsets are based on a UTF-16 string representation as `Position` and `Range` does.\n\n*Note*: a label of type string should be a substring of its containing signature label. Its intended use case is to highlight the parameter label part in the `SignatureInformation.label`."
        }
      },
      "required": [
        "label"
      ],
      "type": "object"
    },
    "PartialResultParams": {
      "additionalProperties": false,
      "properties": {
        "partialResultToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report partial results (e.g. streaming) to the client."
        }
      },
      "type": "object"
    },
    "PrepareRenameParams": {
      "additionalProperties": false,
      "properties": {
        "position": {
          "additionalProperties": false,
          "description": "The position inside the text document.",
          "properties": {
            "character": {
              "$ref": "#/definitions/uinteger",
              "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
            },
            "line": {
              "$ref": "#/definitions/uinteger",
              "description": "Line position in a document (zero-based)."
            }
          },
          "required": [
            "line",
            "character"
          ],
          "type": "object"
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        }
      },
      "required": [
        "position",
        "textDocument"
      ],
      "type": "object"
    },
    "PrepareSupportDefaultBehavior": {
      "const": 1,
      "type": "number"
    },
    "PublishDiagnosticsClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "codeDescriptionSupport": {
          "description": "Client supports a codeDescription property",
          "type": "boolean"
        },
        "dataSupport": {
          "description": "Whether code action supports the `data` property which is preserved between a `textDocument/publishDiagnostics` and `textDocument/codeAction` request.",
          "type": "boolean"
        },
        "relatedInformation": {
          "description": "Whether the clients accepts diagnostics with related information.",
          "type": "boolean"
        },
        "tagSupport": {
          "additionalProperties": false,
          "description": "Client supports the tag property to provide meta data about a diagnostic. Clients supporting tags have to handle unknown tags gracefully.",
          "properties": {
            "valueSet": {
              "description": "The tags supported by the client.",
              "items": {
                "$ref": "#/definitions/DiagnosticTag"
              },
              "type": "array"
            }
          },
          "required": [
            "valueSet"
          ],
          "type": "object"
        },
        "versionSupport": {
          "description": "Whether the client interprets the version property of the `textDocument/publishDiagnostics` notification's parameter.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ReferenceClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Whether references supports dynamic registration.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ReferenceContext": {
      "additionalProperties": false,
      "properties": {
        "includeDeclaration": {
          "description": "Include the declaration of the current symbol.",
          "type": "boolean"
        }
      },
      "required": [
        "includeDeclaration"
      ],
      "type": "object"
    },
    "ReferenceOptions": {
      "additionalProperties": false,
      "properties": {
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ReferenceParams": {
      "additionalProperties": false,
      "properties": {
        "context": {
          "$ref": "#/definitions/ReferenceContext"
        },
        "partialResultToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report partial results (e.g. streaming) to the client."
        },
        "position": {
          "additionalProperties": false,
          "description": "The position inside the text document.",
          "properties": {
            "character": {
              "$ref": "#/definitions/uinteger",
              "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
            },
            "line": {
              "$ref": "#/definitions/uinteger",
              "description": "Line position in a document (zero-based)."
            }
          },
          "required": [
            "line",
            "character"
          ],
          "type": "object"
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "context",
        "position",
        "textDocument"
      ],
      "type": "object"
    },
    "ReferenceRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "Registration": {
      "additionalProperties": false,
      "description": "General parameters to register for a capability.",
      "properties": {
        "id": {
          "description": "The id used to register the request. The id can be used to deregister the request again.",
          "type": "string"
        },
        "method": {
          "description": "The method / capability to register for.",
          "type": "string"
        },
        "registerOptions": {
          "description": "Options necessary for the registration."
        }
      },
      "required": [
        "id",
        "method"
      ],
      "type": "object"
    },
    "RegistrationParams": {
      "additionalProperties": false,
      "properties": {
        "registrations": {
          "items": {
            "$ref": "#/definitions/Registration"
          },
          "type": "array"
        }
      },
      "required": [
        "registrations"
      ],
      "type": "object"
    },
    "RegularExpressionsClientCapabilities": {
      "additionalProperties": false,
      "description": "Client capabilities specific to regular expressions.",
      "properties": {
        "engine": {
          "description": "The engine's name.",
          "type": "string"
        },
        "version": {
          "description": "The engine's version.",
          "type": "string"
        }
      },
      "required": [
        "engine"
      ],
      "type": "object"
    },
    "RenameClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Whether rename supports dynamic registration.",
          "type": "boolean"
        },
        "honorsChangeAnnotations": {
          "description": "Whether the client honors the change annotations in text edits and resource operations returned via the rename request's workspace edit by for example presenting the workspace edit in the user interface and asking for confirmation.",
          "type": "boolean"
        },
        "prepareSupport": {
          "description": "Client supports testing for validity of rename operations before execution.",
          "type": "boolean"
        },
        "prepareSupportDefaultBehavior": {
          "$ref": "#/definitions/PrepareSupportDefaultBehavior",
          "description": "Client supports the default behavior result (`{ defaultBehavior: boolean }`).\n\nThe value indicates the default behavior used by the client."
        }
      },
      "type": "object"
    },
    "RenameFile": {
      "additionalProperties": false,
      "description": "Rename file operation",
      "properties": {
        "annotationId": {
          "$ref": "#/definitions/ChangeAnnotationIdentifier",
          "description": "An optional annotation identifer describing the operation."
        },
        "kind": {
          "const": "rename",
          "description": "A rename",
          "type": "string"
        },
        "newUri": {
          "description": "The new location.",
          "type": "string"
        },
        "oldUri": {
          "description": "The old (existing) location.",
          "type": "string"
        },
        "options": {
          "$ref": "#/definitions/RenameFileOptions",
          "description": "Rename options."
        }
      },
      "required": [
        "kind",
        "oldUri",
        "newUri"
      ],
      "type": "object"
    },
    "RenameFileOptions": {
      "additionalProperties": false,
      "description": "Rename file options",
      "properties": {
        "ignoreIfExists": {
          "description": "Ignores if target exists.",
          "type": "boolean"
        },
        "overwrite": {
          "description": "Overwrite target if existing. Overwrite wins over `ignoreIfExists`",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "RenameFilesParams": {
      "additionalProperties": false,
      "description": "The parameters sent in notifications/requests for user-initiated renames of files.",
      "properties": {
        "files": {
          "description": "An array of all files/folders renamed in this operation. When a folder is renamed, only the folder will be included, and not its children.",
          "items": {
            "$ref": "#/definitions/FileRename"
          },
          "type": "array"
        }
      },
      "required": [
        "files"
      ],
      "type": "object"
    },
    "RenameOptions": {
      "additionalProperties": false,
      "properties": {
        "prepareProvider": {
          "description": "Renames should be checked and tested before being executed.",
          "type": "boolean"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "RenameRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "prepareProvider": {
          "description": "Renames should be checked and tested before being executed.",
          "type": "boolean"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "ResourceOperationKind": {
      "description": "The kind of resource operations supported by the client.",
      "enum": [
        "create",
        "rename",
        "delete"
      ],
      "type": "string"
    },
    "SaveOptions": {
      "additionalProperties": false,
      "properties": {
        "includeText": {
          "description": "The client is supposed to include the content on save.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SelectionRange": {
      "additionalProperties": false,
      "properties": {
        "parent": {
          "$ref": "#/definitions/SelectionRange",
          "description": "The parent selection range containing this range. Therefore `parent.range` must contain `this.range`."
        },
        "range": {
          "additionalProperties": false,
          "description": "The [range](#Range) of this selection range.",
          "properties": {
            "end": {
              "additionalProperties": false,
              "description": "The range's end position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            },
            "start": {
              "additionalProperties": false,
              "description": "The range's start position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            }
          },
          "required": [
            "start",
            "end"
          ],
          "type": "object"
        }
      },
      "required": [
        "range"
      ],
      "type": "object"
    },
    "SelectionRangeClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Whether implementation supports dynamic registration for selection range providers. If this is set to `true` the client supports the new `SelectionRangeRegistrationOptions` return value for the corresponding server capability as well.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SelectionRangeOptions": {
      "additionalProperties": false,
      "properties": {
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SelectionRangeParams": {
      "additionalProperties": false,
      "properties": {
        "partialResultToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report partial results (e.g. streaming) to the client."
        },
        "positions": {
          "description": "The positions inside the text document.",
          "items": {
            "additionalProperties": false,
            "properties": {
              "character": {
                "$ref": "#/definitions/uinteger",
                "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
              },
              "line": {
                "$ref": "#/definitions/uinteger",
                "description": "Line position in a document (zero-based)."
              }
            },
            "required": [
              "line",
              "character"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "textDocument",
        "positions"
      ],
      "type": "object"
    },
    "SelectionRangeRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "id": {
          "description": "The id used to register the request. The id can be used to deregister the request again. See also Registration#id.",
          "type": "string"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "SemanticTokenModifiers": {
      "enum": [
        "declaration",
        "definition",
        "readonly",
        "static",
        "deprecated",
        "abstract",
        "async",
        "modification",
        "documentation",
        "defaultLibrary"
      ],
      "type": "string"
    },
    "SemanticTokenTypes": {
      "enum": [
        "namespace",
        "type",
        "class",
        "enum",
        "interface",
        "struct",
        "typeParameter",
        "parameter",
        "variable",
        "property",
        "enumMember",
        "event",
        "function",
        "method",
        "macro",
        "keyword",
        "modifier",
        "comment",
        "string",
        "number",
        "regexp",
        "operator"
      ],
      "type": "string"
    },
    "SemanticTokens": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "The actual tokens.",
          "items": {
            "$ref": "#/definitions/uinteger"
          },
          "type": "array"
        },
        "resultId": {
          "description": "An optional result id. If provided and clients support delta updating the client will include the result id in the next semantic token request. A server can then instead of computing all semantic tokens again simply send a delta.",
          "type": "string"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "SemanticTokensDelta": {
      "additionalProperties": false,
      "properties": {
        "edits": {
          "description": "The semantic token edits to transform a previous result into a new result.",
          "items": {
            "$ref": "#/definitions/SemanticTokensEdit"
          },
          "type": "array"
        },
        "resultId": {
          "type": "string"
        }
      },
      "required": [
        "edits"
      ],
      "type": "object"
    },
    "SemanticTokensDeltaParams": {
      "additionalProperties": false,
      "properties": {
        "partialResultToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report partial results (e.g. streaming) to the client."
        },
        "previousResultId": {
          "description": "The result id of a previous response. The result Id can either point to a full response or a delta response depending on what was received last.",
          "type": "string"
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "textDocument",
        "previousResultId"
      ],
      "type": "object"
    },
    "SemanticTokensDeltaPartialResult": {
      "additionalProperties": false,
      "properties": {
        "edits": {
          "items": {
            "$ref": "#/definitions/SemanticTokensEdit"
          },
          "type": "array"
        }
      },
      "required": [
        "edits"
      ],
      "type": "object"
    },
    "SemanticTokensEdit": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "description": "The elements to insert.",
          "items": {
            "$ref": "#/definitions/uinteger"
          },
          "type": "array"
        },
        "deleteCount": {
          "$ref": "#/definitions/uinteger",
          "description": "The count of elements to remove."
        },
        "start": {
          "$ref": "#/definitions/uinteger",
          "description": "The start offset of the edit."
        }
      },
      "required": [
        "start",
        "deleteCount"
      ],
      "type": "object"
    },
    "SemanticTokensLegend": {
      "additionalProperties": false,
      "properties": {
        "tokenModifiers": {
          "description": "The token modifiers a server uses.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tokenTypes": {
          "description": "The token types a server uses.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "tokenTypes",
        "tokenModifiers"
      ],
      "type": "object"
    },
    "SemanticTokensOptions": {
      "additionalProperties": false,
      "properties": {
        "full": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "properties": {
                "delta": {
                  "description": "The server supports deltas for full documents.",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          ],
          "description": "Server supports providing semantic tokens for a full document."
        },
        "legend": {
          "$ref": "#/definitions/SemanticTokensLegend",
          "description": "The legend used by the server"
        },
        "range": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "type": "object"
            }
          ],
          "description": "Server supports providing semantic tokens for a specific range of a document."
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "legend"
      ],
      "type": "object"
    },
    "SemanticTokensParams": {
      "additionalProperties": false,
      "properties": {
        "partialResultToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report partial results (e.g. streaming) to the client."
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "textDocument"
      ],
      "type": "object"
    },
    "SemanticTokensPartialResult": {
      "additionalProperties": false,
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/uinteger"
          },
          "type": "array"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "SemanticTokensRangeParams": {
      "additionalProperties": false,
      "properties": {
        "partialResultToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report partial results (e.g. streaming) to the client."
        },
        "range": {
          "additionalProperties": false,
          "description": "The range the semantic tokens are requested for.",
          "properties": {
            "end": {
              "additionalProperties": false,
              "description": "The range's end position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            },
            "start": {
              "additionalProperties": false,
              "description": "The range's start position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            }
          },
          "required": [
            "start",
            "end"
          ],
          "type": "object"
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "textDocument",
        "range"
      ],
      "type": "object"
    },
    "SemanticTokensRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "full": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "properties": {
                "delta": {
                  "description": "The server supports deltas for full documents.",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          ],
          "description": "Server supports providing semantic tokens for a full document."
        },
        "id": {
          "description": "The id used to register the request. The id can be used to deregister the request again. See also Registration#id.",
          "type": "string"
        },
        "legend": {
          "$ref": "#/definitions/SemanticTokensLegend",
          "description": "The legend used by the server"
        },
        "range": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "additionalProperties": false,
              "type": "object"
            }
          ],
          "description": "Server supports providing semantic tokens for a specific range of a document."
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector",
        "legend"
      ],
      "type": "object"
    },
    "SemanticTokensWorkspaceClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "refreshSupport": {
          "description": "Whether the client implementation supports a refresh request sent from the server to the client.\n\nNote that this event is global and will force the client to refresh all semantic tokens currently shown. It should be used with absolute care and is useful for situation where a server for example detect a project wide change that requires such a calculation.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ShowDocumentClientCapabilities": {
      "additionalProperties": false,
      "description": "Client capabilities for the show document request.",
      "properties": {
        "support": {
          "description": "The client has support for the show document request.",
          "type": "boolean"
        }
      },
      "required": [
        "support"
      ],
      "type": "object"
    },
    "ShowDocumentParams": {
      "additionalProperties": false,
      "description": "Params to show a document.",
      "properties": {
        "external": {
          "description": "Indicates to show the resource in an external program. To show for example `https://code.visualstudio.com/` in the default WEB browser set `external` to `true`.",
          "type": "boolean"
        },
        "selection": {
          "additionalProperties": false,
          "description": "An optional selection range if the document is a text document. Clients might ignore the property if an external program is started or the file is not a text file.",
          "properties": {
            "end": {
              "additionalProperties": false,
              "description": "The range's end position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            },
            "start": {
              "additionalProperties": false,
              "description": "The range's start position.",
              "properties": {
                "character": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                },
                "line": {
                  "$ref": "#/definitions/uinteger",
                  "description": "Line position in a document (zero-based)."
                }
              },
              "required": [
                "line",
                "character"
              ],
              "type": "object"
            }
          },
          "required": [
            "start",
            "end"
          ],
          "type": "object"
        },
        "takeFocus": {
          "description": "An optional property to indicate whether the editor showing the document should take focus or not. Clients might ignore this property if an external program is started.",
          "type": "boolean"
        },
        "uri": {
          "description": "The document uri to show.",
          "type": "string"
        }
      },
      "required": [
        "uri"
      ],
      "type": "object"
    },
    "ShowDocumentResult": {
      "additionalProperties": false,
      "description": "The result of an show document request.",
      "properties": {
        "success": {
          "description": "A boolean indicating if the show was successful.",
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ],
      "type": "object"
    },
    "ShowMessageRequestClientCapabilities": {
      "additionalProperties": false,
      "description": "Show message request client capabilities",
      "properties": {
        "messageActionItem": {
          "additionalProperties": false,
          "description": "Capabilities specific to the `MessageActionItem` type.",
          "properties": {
            "additionalPropertiesSupport": {
              "description": "Whether the client supports additional attributes which are preserved and sent back to the server in the request's response.",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "SignatureHelp": {
      "additionalProperties": false,
      "description": "Signature help represents the signature of something callable. There can be multiple signature but only one active and only one active parameter.",
      "properties": {
        "activeParameter": {
          "$ref": "#/definitions/uinteger",
          "description": "The active parameter of the active signature. If omitted or the value lies outside the range of `signatures[activeSignature].parameters` defaults to 0 if the active signature has parameters. If the active signature has no parameters it is ignored. In future version of the protocol this property might become mandatory to better express the active parameter if the active signature does have any."
        },
        "activeSignature": {
          "$ref": "#/definitions/uinteger",
          "description": "The active signature. If omitted or the value lies outside the range of `signatures` the value defaults to zero or is ignored if the `SignatureHelp` has no signatures.\n\nWhenever possible implementors should make an active decision about the active signature and shouldn't rely on a default value.\n\nIn future version of the protocol this property might become mandatory to better express this."
        },
        "signatures": {
          "description": "One or more signatures. If no signatures are available the signature help request should return `null`.",
          "items": {
            "$ref": "#/definitions/SignatureInformation"
          },
          "type": "array"
        }
      },
      "required": [
        "signatures"
      ],
      "type": "object"
    },
    "SignatureHelpClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "contextSupport": {
          "description": "The client supports to send additional context information for a `textDocument/signatureHelp` request. A client that opts into contextSupport will also support the `retriggerCharacters` on `SignatureHelpOptions`.",
          "type": "boolean"
        },
        "dynamicRegistration": {
          "description": "Whether signature help supports dynamic registration.",
          "type": "boolean"
        },
        "signatureInformation": {
          "additionalProperties": false,
          "description": "The client supports the following `SignatureInformation` specific properties.",
          "properties": {
            "activeParameterSupport": {
              "description": "The client supports the `activeParameter` property on `SignatureInformation` literal.",
              "type": "boolean"
            },
            "documentationFormat": {
              "description": "Client supports the following content formats for the documentation property. The order describes the preferred format of the client.",
              "items": {
                "$ref": "#/definitions/MarkupKind"
              },
              "type": "array"
            },
            "parameterInformation": {
              "additionalProperties": false,
              "description": "Client capabilities specific to parameter information.",
              "properties": {
                "labelOffsetSupport": {
                  "description": "The client supports processing label offsets instead of a simple label string.",
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "SignatureHelpContext": {
      "additionalProperties": false,
      "description": "Additional information about the context in which a signature help request was triggered.",
      "properties": {
        "activeSignatureHelp": {
          "$ref": "#/definitions/SignatureHelp",
          "description": "The currently active `SignatureHelp`.\n\nThe `activeSignatureHelp` has its `SignatureHelp.activeSignature` field updated based on the user navigating through available signatures."
        },
        "isRetrigger": {
          "description": "`true` if signature help was already showing when it was triggered.\n\nRetriggers occur when the signature help is already active and can be caused by actions such as typing a trigger character, a cursor move, or document content changes.",
          "type": "boolean"
        },
        "triggerCharacter": {
          "description": "Character that caused signature help to be triggered.\n\nThis is undefined when triggerKind !== SignatureHelpTriggerKind.TriggerCharacter",
          "type": "string"
        },
        "triggerKind": {
          "$ref": "#/definitions/SignatureHelpTriggerKind",
          "description": "Action that caused signature help to be triggered."
        }
      },
      "required": [
        "triggerKind",
        "isRetrigger"
      ],
      "type": "object"
    },
    "SignatureHelpOptions": {
      "additionalProperties": false,
      "properties": {
        "retriggerCharacters": {
          "description": "List of characters that re-trigger signature help.\n\nThese trigger characters are only active when signature help is already showing. All trigger characters are also counted as re-trigger characters.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "triggerCharacters": {
          "description": "The characters that trigger signature help automatically.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SignatureHelpParams": {
      "additionalProperties": false,
      "properties": {
        "context": {
          "$ref": "#/definitions/SignatureHelpContext",
          "description": "The signature help context. This is only available if the client specifies to send this using the client capability `textDocument.signatureHelp.contextSupport === true`"
        },
        "position": {
          "additionalProperties": false,
          "description": "The position inside the text document.",
          "properties": {
            "character": {
              "$ref": "#/definitions/uinteger",
              "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
            },
            "line": {
              "$ref": "#/definitions/uinteger",
              "description": "Line position in a document (zero-based)."
            }
          },
          "required": [
            "line",
            "character"
          ],
          "type": "object"
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "position",
        "textDocument"
      ],
      "type": "object"
    },
    "SignatureHelpRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "retriggerCharacters": {
          "description": "List of characters that re-trigger signature help.\n\nThese trigger characters are only active when signature help is already showing. All trigger characters are also counted as re-trigger characters.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "triggerCharacters": {
          "description": "The characters that trigger signature help automatically.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "SignatureHelpTriggerKind": {
      "description": "How a signature help was triggered.",
      "enum": [
        1,
        2,
        3
      ],
      "enumNames": [
        "Invoked",
        "TriggerCharacter",
        "ContentChange"
      ],
      "type": "number"
    },
    "SignatureInformation": {
      "additionalProperties": false,
      "description": "Represents the signature of something callable. A signature can have a label, like a function-name, a doc-comment, and a set of parameters.",
      "properties": {
        "activeParameter": {
          "$ref": "#/definitions/uinteger",
          "description": "The index of the active parameter.\n\nIf provided, this is used in place of `SignatureHelp.activeParameter`."
        },
        "documentation": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/MarkupContent"
            }
          ],
          "description": "The human-readable doc-comment of this signature. Will be shown in the UI but can be omitted."
        },
        "label": {
          "description": "The label of this signature. Will be shown in the UI.",
          "type": "string"
        },
        "parameters": {
          "description": "The parameters of this signature.",
          "items": {
            "$ref": "#/definitions/ParameterInformation"
          },
          "type": "array"
        }
      },
      "required": [
        "label"
      ],
      "type": "object"
    },
    "StaticRegistrationOptions": {
      "additionalProperties": false,
      "description": "Static registration options to be returned in the initialize request.",
      "properties": {
        "id": {
          "description": "The id used to register the request. The id can be used to deregister the request again. See also Registration#id.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SymbolInformation": {
      "additionalProperties": false,
      "description": "Represents information about programming constructs like variables, classes, interfaces etc.",
      "properties": {
        "containerName": {
          "description": "The name of the symbol containing this symbol. This information is for user interface purposes (e.g. to render a qualifier in the user interface if necessary). It can't be used to re-infer a hierarchy for the document symbols.",
          "type": "string"
        },
        "deprecated": {
          "deprecated": "Use tags instead",
          "description": "Indicates if this symbol is deprecated.",
          "type": "boolean"
        },
        "kind": {
          "$ref": "#/definitions/SymbolKind",
          "description": "The kind of this symbol."
        },
        "location": {
          "additionalProperties": false,
          "description": "The location of this symbol. The location's range is used by a tool to reveal the location in the editor. If the symbol is selected in the tool the range's start information is used to position the cursor. So the range usually spans more then the actual symbol's name and does normally include things like visibility modifiers.\n\nThe range doesn't have to denote a node range in the sense of a abstract syntax tree. It can therefore not be used to re-construct a hierarchy of the symbols.",
          "properties": {
            "range": {
              "additionalProperties": false,
              "properties": {
                "end": {
                  "additionalProperties": false,
                  "description": "The range's end position.",
                  "properties": {
                    "character": {
                      "$ref": "#/definitions/uinteger",
                      "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                    },
                    "line": {
                      "$ref": "#/definitions/uinteger",
                      "description": "Line position in a document (zero-based)."
                    }
                  },
                  "required": [
                    "line",
                    "character"
                  ],
                  "type": "object"
                },
                "start": {
                  "additionalProperties": false,
                  "description": "The range's start position.",
                  "properties": {
                    "character": {
                      "$ref": "#/definitions/uinteger",
                      "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                    },
                    "line": {
                      "$ref": "#/definitions/uinteger",
                      "description": "Line position in a document (zero-based)."
                    }
                  },
                  "required": [
                    "line",
                    "character"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "start",
                "end"
              ],
              "type": "object"
            },
            "uri": {
              "type": "string"
            }
          },
          "required": [
            "uri",
            "range"
          ],
          "type": "object"
        },
        "name": {
          "description": "The name of this symbol.",
          "type": "string"
        },
        "tags": {
          "description": "Tags for this symbol.",
          "items": {
            "$ref": "#/definitions/SymbolTag"
          },
          "type": "array"
        }
      },
      "required": [
        "name",
        "kind",
        "location"
      ],
      "type": "object"
    },
    "SymbolKind": {
      "description": "A symbol kind.",
      "enum": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26
      ],
      "enumNames": [
        "File",
        "Module",
        "Namespace",
        "Package",
        "Class",
        "Method",
        "Property",
        "Field",
        "Constructor",
        "Enum",
        "Interface",
        "Function",
        "Variable",
        "Constant",
        "String",
        "Number",
        "Boolean",
        "Array",
        "Object",
        "Key",
        "Null",
        "EnumMember",
        "Struct",
        "Event",
        "Operator",
        "TypeParameter"
      ],
      "type": "number"
    },
    "SymbolTag": {
      "const": 1,
      "description": "Symbol tags are extra annotations that tweak the rendering of a symbol.",
      "type": "number"
    },
    "TextDocumentChangeRegistrationOptions": {
      "additionalProperties": false,
      "description": "Describe options to be used when registering for text document change events.",
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "syncKind": {
          "$ref": "#/definitions/TextDocumentSyncKind",
          "description": "How documents are synced to the server. See TextDocumentSyncKind.Full and TextDocumentSyncKind.Incremental."
        }
      },
      "required": [
        "documentSelector",
        "syncKind"
      ],
      "type": "object"
    },
    "TextDocumentClientCapabilities": {
      "additionalProperties": false,
      "description": "Text document specific client capabilities.",
      "properties": {
        "callHierarchy": {
          "additionalProperties": false,
          "description": "Capabilities specific to the various call hierarchy requests.",
          "properties": {
            "dynamicRegistration": {
              "description": "Whether implementation supports dynamic registration. If this is set to `true` the client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)` return value for the corresponding server capability as well.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "codeAction": {
          "$ref": "#/definitions/CodeActionClientCapabilities",
          "description": "Capabilities specific to the `textDocument/codeAction` request."
        },
        "codeLens": {
          "$ref": "#/definitions/CodeLensClientCapabilities",
          "description": "Capabilities specific to the `textDocument/codeLens` request."
        },
        "colorProvider": {
          "$ref": "#/definitions/DocumentColorClientCapabilities",
          "description": "Capabilities specific to the `textDocument/documentColor` and the `textDocument/colorPresentation` request."
        },
        "completion": {
          "$ref": "#/definitions/CompletionClientCapabilities",
          "description": "Capabilities specific to the `textDocument/completion` request."
        },
        "declaration": {
          "$ref": "#/definitions/DeclarationClientCapabilities",
          "description": "Capabilities specific to the `textDocument/declaration` request."
        },
        "definition": {
          "$ref": "#/definitions/DefinitionClientCapabilities",
          "description": "Capabilities specific to the `textDocument/definition` request."
        },
        "documentHighlight": {
          "$ref": "#/definitions/DocumentHighlightClientCapabilities",
          "description": "Capabilities specific to the `textDocument/documentHighlight` request."
        },
        "documentLink": {
          "$ref": "#/definitions/DocumentLinkClientCapabilities",
          "description": "Capabilities specific to the `textDocument/documentLink` request."
        },
        "documentSymbol": {
          "$ref": "#/definitions/DocumentSymbolClientCapabilities",
          "description": "Capabilities specific to the `textDocument/documentSymbol` request."
        },
        "foldingRange": {
          "$ref": "#/definitions/FoldingRangeClientCapabilities",
          "description": "Capabilities specific to the `textDocument/foldingRange` request."
        },
        "formatting": {
          "$ref": "#/definitions/DocumentFormattingClientCapabilities",
          "description": "Capabilities specific to the `textDocument/formatting` request."
        },
        "hover": {
          "$ref": "#/definitions/HoverClientCapabilities",
          "description": "Capabilities specific to the `textDocument/hover` request."
        },
        "implementation": {
          "$ref": "#/definitions/ImplementationClientCapabilities",
          "description": "Capabilities specific to the `textDocument/implementation` request."
        },
        "linkedEditingRange": {
          "$ref": "#/definitions/LinkedEditingRangeClientCapabilities",
          "description": "Capabilities specific to the `textDocument/linkedEditingRange` request."
        },
        "moniker": {
          "additionalProperties": false,
          "description": "Capabilities specific to the `textDocument/moniker` request.",
          "properties": {
            "dynamicRegistration": {
              "description": "Whether implementation supports dynamic registration. If this is set to `true` the client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)` return value for the corresponding server capability as well.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "onTypeFormatting": {
          "$ref": "#/definitions/DocumentOnTypeFormattingClientCapabilities",
          "description": "Capabilities specific to the `textDocument/onTypeFormatting` request."
        },
        "publishDiagnostics": {
          "$ref": "#/definitions/PublishDiagnosticsClientCapabilities",
          "description": "Capabilities specific to the `textDocument/publishDiagnostics` notification."
        },
        "rangeFormatting": {
          "$ref": "#/definitions/DocumentRangeFormattingClientCapabilities",
          "description": "Capabilities specific to the `textDocument/rangeFormatting` request."
        },
        "references": {
          "$ref": "#/definitions/ReferenceClientCapabilities",
          "description": "Capabilities specific to the `textDocument/references` request."
        },
        "rename": {
          "$ref": "#/definitions/RenameClientCapabilities",
          "description": "Capabilities specific to the `textDocument/rename` request."
        },
        "selectionRange": {
          "$ref": "#/definitions/SelectionRangeClientCapabilities",
          "description": "Capabilities specific to the `textDocument/selectionRange` request."
        },
        "semanticTokens": {
          "additionalProperties": false,
          "description": "Capabilities specific to the various semantic token requests.",
          "properties": {
            "dynamicRegistration": {
              "description": "Whether implementation supports dynamic registration. If this is set to `true` the client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)` return value for the corresponding server capability as well.",
              "type": "boolean"
            },
            "formats": {
              "description": "The formats the clients supports.",
              "items": {
                "$ref": "#/definitions/TokenFormat"
              },
              "type": "array"
            },
            "multilineTokenSupport": {
              "description": "Whether the client supports tokens that can span multiple lines.",
              "type": "boolean"
            },
            "overlappingTokenSupport": {
              "description": "Whether the client supports tokens that can overlap each other.",
              "type": "boolean"
            },
            "requests": {
              "additionalProperties": false,
              "description": "Which requests the client supports and might send to the server depending on the server's capability. Please note that clients might not show semantic tokens or degrade some of the user experience if a range or full request is advertised by the client but not provided by the server. If for example the client capability `requests.full` and `request.range` are both set to true but the server only provides a range provider the client might not render a minimap correctly or might even decide to not show any semantic tokens at all.",
              "properties": {
                "full": {
                  "anyOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "delta": {
                          "description": "The client will send the `textDocument/semanticTokens/full/delta` request if the server provides a corresponding handler.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ],
                  "description": "The client will send the `textDocument/semanticTokens/full` request if the server provides a corresponding handler."
                },
                "range": {
                  "anyOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "additionalProperties": false,
                      "type": "object"
                    }
                  ],
                  "description": "The client will send the `textDocument/semanticTokens/range` request if the server provides a corresponding handler."
                }
              },
              "type": "object"
            },
            "tokenModifiers": {
              "description": "The token modifiers that the client supports.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "tokenTypes": {
              "description": "The token types that the client supports.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [
            "requests",
            "tokenTypes",
            "tokenModifiers",
            "formats"
          ],
          "type": "object"
        },
        "signatureHelp": {
          "$ref": "#/definitions/SignatureHelpClientCapabilities",
          "description": "Capabilities specific to the `textDocument/signatureHelp` request."
        },
        "synchronization": {
          "$ref": "#/definitions/TextDocumentSyncClientCapabilities"
        },
        "typeDefinition": {
          "$ref": "#/definitions/TypeDefinitionClientCapabilities",
          "description": "Capabilities specific to the `textDocument/typeDefinition` request."
        }
      },
      "type": "object"
    },
    "TextDocumentContentChangeEvent": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "range": {
              "additionalProperties": false,
              "description": "The range of the document that changed.",
              "properties": {
                "end": {
                  "additionalProperties": false,
                  "description": "The range's end position.",
                  "properties": {
                    "character": {
                      "$ref": "#/definitions/uinteger",
                      "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                    },
                    "line": {
                      "$ref": "#/definitions/uinteger",
                      "description": "Line position in a document (zero-based)."
                    }
                  },
                  "required": [
                    "line",
                    "character"
                  ],
                  "type": "object"
                },
                "start": {
                  "additionalProperties": false,
                  "description": "The range's start position.",
                  "properties": {
                    "character": {
                      "$ref": "#/definitions/uinteger",
                      "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                    },
                    "line": {
                      "$ref": "#/definitions/uinteger",
                      "description": "Line position in a document (zero-based)."
                    }
                  },
                  "required": [
                    "line",
                    "character"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "start",
                "end"
              ],
              "type": "object"
            },
            "rangeLength": {
              "$ref": "#/definitions/uinteger",
              "deprecated": "use range instead.",
              "description": "The optional length of the range that got replaced."
            },
            "text": {
              "description": "The new text for the provided range.",
              "type": "string"
            }
          },
          "required": [
            "range",
            "text"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "text": {
              "description": "The new text of the whole document.",
              "type": "string"
            }
          },
          "required": [
            "text"
          ],
          "type": "object"
        }
      ],
      "description": "An event describing a change to a text document. If range and rangeLength are omitted the new text is considered to be the full content of the document."
    },
    "TextDocumentEdit": {
      "additionalProperties": false,
      "properties": {
        "edits": {
          "description": "The edits to be applied.",
          "items": {
            "anyOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "newText": {
                    "description": "The string to be inserted. For delete operations use an empty string.",
                    "type": "string"
                  },
                  "range": {
                    "additionalProperties": false,
                    "description": "The range of the text document to be manipulated. To insert text into a document create a range where start === end.",
                    "properties": {
                      "end": {
                        "additionalProperties": false,
                        "description": "The range's end position.",
                        "properties": {
                          "character": {
                            "$ref": "#/definitions/uinteger",
                            "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                          },
                          "line": {
                            "$ref": "#/definitions/uinteger",
                            "description": "Line position in a document (zero-based)."
                          }
                        },
                        "required": [
                          "line",
                          "character"
                        ],
                        "type": "object"
                      },
                      "start": {
                        "additionalProperties": false,
                        "description": "The range's start position.",
                        "properties": {
                          "character": {
                            "$ref": "#/definitions/uinteger",
                            "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                          },
                          "line": {
                            "$ref": "#/definitions/uinteger",
                            "description": "Line position in a document (zero-based)."
                          }
                        },
                        "required": [
                          "line",
                          "character"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "start",
                      "end"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "range",
                  "newText"
                ],
                "type": "object"
              },
              {
                "$ref": "#/definitions/AnnotatedTextEdit"
              }
            ]
          },
          "type": "array"
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document to change.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            },
            "version": {
              "anyOf": [
                {
                  "$ref": "#/definitions/integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "The version number of this document. If an optional versioned text document identifier is sent from the server to the client and the file is not open in the editor (the server has not received an open notification before) the server can send `null` to indicate that the version is known and the content on disk is the master (as specified with document content ownership).\n\nThe version number of a document will increase after each change, including undo/redo. The number doesn't need to be consecutive."
            }
          },
          "required": [
            "uri",
            "version"
          ],
          "type": "object"
        }
      },
      "required": [
        "textDocument",
        "edits"
      ],
      "type": "object"
    },
    "TextDocumentRegistrationOptions": {
      "additionalProperties": false,
      "description": "General text document registration options.",
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "TextDocumentSaveReason": {
      "description": "Represents reasons why a text document is saved.",
      "enum": [
        1,
        2,
        3
      ],
      "enumNames": [
        "Manual",
        "AfterDelay",
        "FocusOut"
      ],
      "type": "number"
    },
    "TextDocumentSaveRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "includeText": {
          "description": "The client is supposed to include the content on save.",
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "TextDocumentSyncClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "didSave": {
          "description": "The client supports did save notifications.",
          "type": "boolean"
        },
        "dynamicRegistration": {
          "description": "Whether text document synchronization supports dynamic registration.",
          "type": "boolean"
        },
        "willSave": {
          "description": "The client supports sending will save notifications.",
          "type": "boolean"
        },
        "willSaveWaitUntil": {
          "description": "The client supports sending a will save request and waits for a response providing text edits which will be applied to the document before it is saved.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "TextDocumentSyncKind": {
      "description": "Defines how the host (editor) should sync document changes to the language server.",
      "enum": [
        0,
        1,
        2
      ],
      "enumNames": [
        "None",
        "Full",
        "Incremental"
      ],
      "type": "number"
    },
    "TextDocumentSyncOptions": {
      "additionalProperties": false,
      "properties": {
        "change": {
          "$ref": "#/definitions/TextDocumentSyncKind",
          "description": "Change notifications are sent to the server. See TextDocumentSyncKind.None, TextDocumentSyncKind.Full and TextDocumentSyncKind.Incremental. If omitted it defaults to TextDocumentSyncKind.None."
        },
        "openClose": {
          "description": "Open and close notifications are sent to the server. If omitted open close notification should not be sent.",
          "type": "boolean"
        },
        "save": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "$ref": "#/definitions/SaveOptions"
            }
          ],
          "description": "If present save notifications are sent to the server. If omitted the notification should not be sent."
        },
        "willSave": {
          "description": "If present will save notifications are sent to the server. If omitted the notification should not be sent.",
          "type": "boolean"
        },
        "willSaveWaitUntil": {
          "description": "If present will save wait until requests are sent to the server. If omitted the request should not be sent.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "TokenFormat": {
      "const": "relative",
      "type": "string"
    },
    "TraceValue": {
      "enum": [
        "off",
        "messages",
        "verbose"
      ],
      "type": "string"
    },
    "TypeDefinitionClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "dynamicRegistration": {
          "description": "Whether implementation supports dynamic registration. If this is set to `true` the client supports the new `TypeDefinitionRegistrationOptions` return value for the corresponding server capability as well.",
          "type": "boolean"
        },
        "linkSupport": {
          "description": "The client supports additional metadata in the form of definition links.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "TypeDefinitionOptions": {
      "additionalProperties": false,
      "properties": {
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "TypeDefinitionParams": {
      "additionalProperties": false,
      "properties": {
        "partialResultToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report partial results (e.g. streaming) to the client."
        },
        "position": {
          "additionalProperties": false,
          "description": "The position inside the text document.",
          "properties": {
            "character": {
              "$ref": "#/definitions/uinteger",
              "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
            },
            "line": {
              "$ref": "#/definitions/uinteger",
              "description": "Line position in a document (zero-based)."
            }
          },
          "required": [
            "line",
            "character"
          ],
          "type": "object"
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The text document.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "required": [
        "position",
        "textDocument"
      ],
      "type": "object"
    },
    "TypeDefinitionRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "documentSelector": {
          "anyOf": [
            {
              "$ref": "#/definitions/DocumentSelector"
            },
            {
              "type": "null"
            }
          ],
          "description": "A document selector to identify the scope of the registration. If set to null the document selector provided on the client side will be used."
        },
        "id": {
          "description": "The id used to register the request. The id can be used to deregister the request again. See also Registration#id.",
          "type": "string"
        },
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "required": [
        "documentSelector"
      ],
      "type": "object"
    },
    "UniquenessLevel": {
      "description": "Moniker uniqueness level to define scope of the moniker.",
      "enum": [
        "document",
        "project",
        "group",
        "scheme",
        "global"
      ],
      "type": "string"
    },
    "Unregistration": {
      "additionalProperties": false,
      "description": "General parameters to unregister a capability.",
      "properties": {
        "id": {
          "description": "The id used to unregister the request or notification. Usually an id provided during the register request.",
          "type": "string"
        },
        "method": {
          "description": "The method / capability to unregister for.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "method"
      ],
      "type": "object"
    },
    "UnregistrationParams": {
      "additionalProperties": false,
      "properties": {
        "unregisterations": {
          "items": {
            "$ref": "#/definitions/Unregistration"
          },
          "type": "array"
        }
      },
      "required": [
        "unregisterations"
      ],
      "type": "object"
    },
    "WatchKind": {
      "enum": [
        1,
        2,
        4
      ],
      "enumNames": [
        "Create",
        "Change",
        "Delete"
      ],
      "type": "number"
    },
    "WillSaveTextDocumentParams": {
      "additionalProperties": false,
      "description": "The parameters send in a will save text document notification.",
      "properties": {
        "reason": {
          "$ref": "#/definitions/TextDocumentSaveReason",
          "description": "The 'TextDocumentSaveReason'."
        },
        "textDocument": {
          "additionalProperties": false,
          "description": "The document that will be saved.",
          "properties": {
            "uri": {
              "description": "The text document's URI.",
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        }
      },
      "required": [
        "textDocument",
        "reason"
      ],
      "type": "object"
    },
    "WorkDoneProgressBegin": {
      "additionalProperties": false,
      "properties": {
        "cancellable": {
          "description": "Controls if a cancel button should show to allow the user to cancel the long running operation. Clients that don't support cancellation are allowed to ignore the setting.",
          "type": "boolean"
        },
        "kind": {
          "const": "begin",
          "type": "string"
        },
        "message": {
          "description": "Optional, more detailed associated progress message. Contains complementary information to the `title`.\n\nExamples: \"3/25 files\", \"project/src/module2\", \"node_modules/some_dep\". If unset, the previous progress message (if any) is still valid.",
          "type": "string"
        },
        "percentage": {
          "$ref": "#/definitions/uinteger",
          "description": "Optional progress percentage to display (value 100 is considered 100%). If not provided infinite progress is assumed and clients are allowed to ignore the `percentage` value in subsequent in report notifications.\n\nThe value should be steadily rising. Clients are free to ignore values that are not following this rule. The value range is [0, 100]"
        },
        "title": {
          "description": "Mandatory title of the progress operation. Used to briefly inform about the kind of operation being performed.\n\nExamples: \"Indexing\" or \"Linking dependencies\".",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "title"
      ],
      "type": "object"
    },
    "WorkDoneProgressCancelParams": {
      "additionalProperties": false,
      "properties": {
        "token": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "The token to be used to report progress."
        }
      },
      "required": [
        "token"
      ],
      "type": "object"
    },
    "WorkDoneProgressCreateParams": {
      "additionalProperties": false,
      "properties": {
        "token": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "The token to be used to report progress."
        }
      },
      "required": [
        "token"
      ],
      "type": "object"
    },
    "WorkDoneProgressEnd": {
      "additionalProperties": false,
      "properties": {
        "kind": {
          "const": "end",
          "type": "string"
        },
        "message": {
          "description": "Optional, a final message indicating to for example indicate the outcome of the operation.",
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "WorkDoneProgressOptions": {
      "additionalProperties": false,
      "properties": {
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "WorkDoneProgressParams": {
      "additionalProperties": false,
      "properties": {
        "workDoneToken": {
          "anyOf": [
            {
              "$ref": "#/definitions/integer"
            },
            {
              "type": "string"
            }
          ],
          "description": "An optional token that a server can use to report work done progress."
        }
      },
      "type": "object"
    },
    "WorkDoneProgressReport": {
      "additionalProperties": false,
      "properties": {
        "cancellable": {
          "description": "Controls enablement state of a cancel button. This property is only valid if a cancel button got requested in the `WorkDoneProgressBegin` payload.\n\nClients that don't support cancellation or don't support control the button's enablement state are allowed to ignore the setting.",
          "type": "boolean"
        },
        "kind": {
          "const": "report",
          "type": "string"
        },
        "message": {
          "description": "Optional, more detailed associated progress message. Contains complementary information to the `title`.\n\nExamples: \"3/25 files\", \"project/src/module2\", \"node_modules/some_dep\". If unset, the previous progress message (if any) is still valid.",
          "type": "string"
        },
        "percentage": {
          "$ref": "#/definitions/uinteger",
          "description": "Optional progress percentage to display (value 100 is considered 100%). If not provided infinite progress is assumed and clients are allowed to ignore the `percentage` value in subsequent in report notifications.\n\nThe value should be steadily rising. Clients are free to ignore values that are not following this rule. The value range is [0, 100]"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "WorkspaceEdit": {
      "additionalProperties": false,
      "properties": {
        "changeAnnotations": {
          "additionalProperties": {
            "$ref": "#/definitions/ChangeAnnotation"
          },
          "description": "A map of change annotations that can be referenced in `AnnotatedTextEdit`s or create, rename and delete file / folder operations.\n\nWhether clients honor this property depends on the client capability `workspace.changeAnnotationSupport`.",
          "type": "object"
        },
        "changes": {
          "additionalProperties": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "newText": {
                  "description": "The string to be inserted. For delete operations use an empty string.",
                  "type": "string"
                },
                "range": {
                  "additionalProperties": false,
                  "description": "The range of the text document to be manipulated. To insert text into a document create a range where start === end.",
                  "properties": {
                    "end": {
                      "additionalProperties": false,
                      "description": "The range's end position.",
                      "properties": {
                        "character": {
                          "$ref": "#/definitions/uinteger",
                          "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                        },
                        "line": {
                          "$ref": "#/definitions/uinteger",
                          "description": "Line position in a document (zero-based)."
                        }
                      },
                      "required": [
                        "line",
                        "character"
                      ],
                      "type": "object"
                    },
                    "start": {
                      "additionalProperties": false,
                      "description": "The range's start position.",
                      "properties": {
                        "character": {
                          "$ref": "#/definitions/uinteger",
                          "description": "Character offset on a line in a document (zero-based). Assuming that the line is represented as a string, the `character` value represents the gap between the `character` and `character + 1`.\n\nIf the character value is greater than the line length it defaults back to the line length."
                        },
                        "line": {
                          "$ref": "#/definitions/uinteger",
                          "description": "Line position in a document (zero-based)."
                        }
                      },
                      "required": [
                        "line",
                        "character"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "start",
                    "end"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "range",
                "newText"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "description": "Holds changes to existing resources.",
          "type": "object"
        },
        "documentChanges": {
          "anyOf": [
            {
              "items": {
                "$ref": "#/definitions/TextDocumentEdit"
              },
              "type": "array"
            },
            {
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/TextDocumentEdit"
                  },
                  {
                    "$ref": "#/definitions/CreateFile"
                  },
                  {
                    "$ref": "#/definitions/RenameFile"
                  },
                  {
                    "$ref": "#/definitions/DeleteFile"
                  }
                ]
              },
              "type": "array"
            }
          ],
          "description": "Depending on the client capability `workspace.workspaceEdit.resourceOperations` document changes are either an array of `TextDocumentEdit`s to express changes to n different text documents where each text document edit addresses a specific version of a text document. Or it can contain above `TextDocumentEdit`s mixed with create, rename and delete file / folder operations.\n\nWhether a client supports versioned document edits is expressed via `workspace.workspaceEdit.documentChanges` client capability.\n\nIf a client neither supports `documentChanges` nor `workspace.workspaceEdit.resourceOperations` then only plain `TextEdit`s using the `changes` property are supported."
        }
      },
      "type": "object"
    },
    "WorkspaceEditClientCapabilities": {
      "additionalProperties": false,
      "properties": {
        "changeAnnotationSupport": {
          "additionalProperties": false,
          "description": "Whether the client in general supports change annotations on text edits, create file, rename file and delete file changes.",
          "properties": {
            "groupsOnLabel": {
              "description": "Whether the client groups edits with equal labels into tree nodes, for instance all edits labelled with \"Changes in Strings\" would be a tree node.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "documentChanges": {
          "description": "The client supports versioned document changes in `WorkspaceEdit`s",
          "type": "boolean"
        },
        "failureHandling": {
          "$ref": "#/definitions/FailureHandlingKind",
          "description": "The failure handling strategy of a client if applying the workspace edit fails."
        },
        "normalizesLineEndings": {
          "description": "Whether the client normalizes line endings to the client specific setting. If set to `true` the client will normalize line ending characters in a workspace edit to the client specific new line character(s).",
          "type": "boolean"
        },
        "resourceOperations": {
          "description": "The resource operations the client supports. Clients should at least support 'create', 'rename' and 'delete' files and folders.",
          "items": {
            "$ref": "#/definitions/ResourceOperationKind"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "WorkspaceFolder": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "description": "The name of the workspace folder. Used to refer to this workspace folder in the user interface.",
          "type": "string"
        },
        "uri": {
          "description": "The associated URI for this workspace folder.",
          "type": "string"
        }
      },
      "required": [
        "uri",
        "name"
      ],
      "type": "object"
    },
    "WorkspaceFoldersChangeEvent": {
      "additionalProperties": false,
      "description": "The workspace folder change event.",
      "properties": {
        "added": {
          "description": "The array of added workspace folders",
          "items": {
            "$ref": "#/definitions/WorkspaceFolder"
          },
          "type": "array"
        },
        "removed": {
          "description": "The array of the removed workspace folders",
          "items": {
            "$ref": "#/definitions/WorkspaceFolder"
          },
          "type": "array"
        }
      },
      "required": [
        "added",
        "removed"
      ],
      "type": "object"
    },
    "WorkspaceFoldersServerCapabilities": {
      "additionalProperties": false,
      "properties": {
        "changeNotifications": {
          "description": "Whether the server wants to receive workspace folder change notifications.\n\nIf a string is provided, the string is treated as an ID under which the notification is registered on the client side. The ID can be used to unregister for these events using the `client/unregisterCapability` request.",
          "type": [
            "string",
            "boolean"
          ]
        },
        "supported": {
          "description": "The server has support for workspace folders",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "WorkspaceSymbolOptions": {
      "additionalProperties": false,
      "properties": {
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "WorkspaceSymbolRegistrationOptions": {
      "additionalProperties": false,
      "properties": {
        "workDoneProgress": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "array": {
      "maxItems": 0,
      "minItems": 0,
      "type": "array"
    },
    "decimal": {
      "description": "Defines a decimal number. Since decimal numbers are very rare in the language server specification we denote the exact range with every decimal using the mathematics interval notation (e.g. [0, 1] denotes all decimals d with 0 <= d <= 1.",
      "type": "number"
    },
    "integer": {
      "description": "Defines an integer number in the range of -2^31 to 2^31 - 1.",
      "type": "number"
    },
    "uinteger": {
      "description": "Defines an unsigned integer number in the range of 0 to 2^31 - 1.",
      "type": "number"
    }
  }
}